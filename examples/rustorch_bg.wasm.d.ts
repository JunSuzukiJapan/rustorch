/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export const __wbg_wasmlinear_free: (a: number, b: number) => void;
export const wasmlinear_new: (a: number, b: number, c: number) => number;
export const wasmlinear_with_weights: (a: number, b: number, c: number, d: number, e: number, f: number) => [number, number, number];
export const wasmlinear_forward: (a: number, b: number, c: number, d: number) => [number, number, number, number];
export const wasmlinear_get_weights: (a: number) => [number, number];
export const wasmlinear_get_bias: (a: number) => [number, number];
export const wasmlinear_update_weights: (a: number, b: number, c: number) => [number, number];
export const wasmlinear_update_bias: (a: number, b: number, c: number) => [number, number];
export const wasmlinear_in_features: (a: number) => number;
export const wasmlinear_out_features: (a: number) => number;
export const wasmlinear_has_bias: (a: number) => number;
export const __wbg_wasmconv2d_free: (a: number, b: number) => void;
export const wasmconv2d_new: (a: number, b: number, c: number, d: number, e: number, f: number) => number;
export const wasmconv2d_forward: (a: number, b: number, c: number, d: number, e: number, f: number) => [number, number, number, number];
export const wasmconv2d_output_shape: (a: number, b: number, c: number) => [number, number];
export const wasmconv2d_get_weights: (a: number) => [number, number];
export const wasmconv2d_get_bias: (a: number) => [number, number];
export const wasmconv2d_update_weights: (a: number, b: number, c: number) => [number, number];
export const wasmconv2d_get_config: (a: number) => any;
export const wasmrelu_forward: (a: number, b: number) => number;
export const __wbg_wasmmodel_free: (a: number, b: number) => void;
export const wasmmodel_new: () => number;
export const wasmmodel_add_linear: (a: number, b: number, c: number, d: number) => void;
export const wasmmodel_add_relu: (a: number) => void;
export const wasmmodel_num_layers: (a: number) => number;
export const wasmmodel_forward: (a: number, b: number) => number;
export const __wbg_browserstorage_free: (a: number, b: number) => void;
export const browserstorage_save_tensor: (a: number, b: number, c: number, d: number) => [number, number];
export const browserstorage_load_tensor: (a: number, b: number, c: number) => [number, number, number];
export const browserstorage_list_tensor_keys: (a: number) => [number, number, number];
export const browserstorage_clear_tensors: (a: number) => [number, number];
export const fileloader_create_file_input: (a: number) => [number, number, number];
export const __wbg_canvasrenderer_free: (a: number, b: number) => void;
export const canvasrenderer_new: (a: number, b: number) => [number, number, number];
export const canvasrenderer_render_heatmap: (a: number, b: number) => [number, number];
export const canvasrenderer_clear: (a: number) => void;
export const __wbg_workermanager_free: (a: number, b: number) => void;
export const workermanager_new: () => number;
export const workermanager_create_worker: (a: number, b: number, c: number) => [number, number];
export const workermanager_send_tensor: (a: number, b: number) => [number, number];
export const workermanager_terminate: (a: number) => void;
export const performancemonitor_get_memory_info: () => [number, number, number];
export const performancemonitor_time_function: (a: number, b: number) => void;
export const performancemonitor_time_end: (a: number, b: number) => void;
export const jsinterop_ones: (a: number, b: any) => number;
export const jsinterop_zeros: (a: number, b: any) => number;
export const jsinterop_random_tensor: (a: number, b: any, c: number, d: number) => number;
export const jsinterop_log_tensor: (a: number, b: number, c: number, d: number) => void;
export const tensor_from_float32_array: (a: any, b: any) => [number, number, number];
export const tensor_to_float32_array: (a: number) => any;
export const tensor_from_nested_array: (a: any) => [number, number, number];
export const tensor_to_nested_array: (a: number) => [number, number, number];
export const tensor_slice: (a: number, b: number, c: number) => [number, number, number];
export const __wbg_benchmarkresult_free: (a: number, b: number) => void;
export const benchmarkresult_operation: (a: number) => [number, number];
export const benchmarkresult_duration_ms: (a: number) => number;
export const benchmarkresult_throughput: (a: number) => number;
export const benchmark_matmul: (a: number, b: number) => number;
export const optimizedops_fast_matmul: (a: number, b: number, c: number) => [number, number, number];
export const optimizedops_vectorized_add: (a: number, b: number, c: number) => [number, number, number];
export const optimizedops_fused_relu_add: (a: number, b: number, c: number) => [number, number, number];
export const optimizedops_conv1d: (a: number, b: number, c: number, d: number) => [number, number, number];
export const optimizedops_batch_normalize: (a: number, b: number, c: number) => number;
export const __wbg_wasmmemorypool_free: (a: number, b: number) => void;
export const wasmmemorypool_new: () => number;
export const wasmmemorypool_get_buffer: (a: number, b: number) => [number, number];
export const wasmmemorypool_return_buffer: (a: number, b: number, c: number) => void;
export const wasmmemorypool_get_stats: (a: number) => [number, number];
export const wasmmemorypool_clear: (a: number) => void;
export const parallelops_parallel_sum: (a: number, b: number) => number;
export const parallelops_parallel_map_add: (a: number, b: number, c: number, d: number) => [number, number];
export const wasmtensor_new: (a: number, b: number, c: number, d: number) => number;
export const wasmtensor_data: (a: number) => [number, number];
export const wasmtensor_shape: (a: number) => [number, number];
export const wasmtensor_add: (a: number, b: number) => [number, number, number];
export const wasmtensor_multiply: (a: number, b: number) => [number, number, number];
export const wasmtensor_relu: (a: number) => number;
export const wasmtensor_sigmoid: (a: number) => number;
export const wasmtensor_matmul: (a: number, b: number) => [number, number, number];
export const wasmtensor_zeros: (a: number, b: number) => number;
export const wasmtensor_ones: (a: number, b: number) => number;
export const wasmtensor_random: (a: number, b: number) => number;
export const wasmtensor_reshape: (a: number, b: number, c: number) => [number, number, number];
export const wasmtensor_size: (a: number) => number;
export const wasmtensor_ndim: (a: number) => number;
export const wasmtensor_transpose: (a: number) => [number, number, number];
export const wasmtensor_subtract: (a: number, b: number) => [number, number, number];
export const wasmtensor_divide: (a: number, b: number) => [number, number, number];
export const wasmtensor_add_scalar: (a: number, b: number) => number;
export const wasmtensor_mul_scalar: (a: number, b: number) => number;
export const wasmtensor_pow: (a: number, b: number) => number;
export const wasmtensor_sqrt: (a: number) => number;
export const wasmtensor_exp: (a: number) => number;
export const wasmtensor_log: (a: number) => number;
export const wasmtensor_sum: (a: number) => number;
export const wasmtensor_mean: (a: number) => number;
export const wasmtensor_max: (a: number) => number;
export const wasmtensor_min: (a: number) => number;
export const wasmtensor_tanh: (a: number) => number;
export const wasmactivation_relu: (a: number, b: number) => [number, number];
export const wasmactivation_relu_derivative: (a: number, b: number) => [number, number];
export const wasmactivation_leaky_relu: (a: number, b: number, c: number) => [number, number];
export const wasmactivation_leaky_relu_derivative: (a: number, b: number, c: number) => [number, number];
export const wasmactivation_sigmoid: (a: number, b: number) => [number, number];
export const wasmactivation_sigmoid_derivative: (a: number, b: number) => [number, number];
export const wasmactivation_tanh: (a: number, b: number) => [number, number];
export const wasmactivation_tanh_derivative: (a: number, b: number) => [number, number];
export const wasmactivation_softmax: (a: number, b: number) => [number, number];
export const wasmactivation_log_softmax: (a: number, b: number) => [number, number];
export const wasmactivation_gelu: (a: number, b: number) => [number, number];
export const wasmactivation_gelu_derivative: (a: number, b: number) => [number, number];
export const wasmactivation_swish: (a: number, b: number) => [number, number];
export const wasmactivation_mish: (a: number, b: number) => [number, number];
export const wasmactivation_elu: (a: number, b: number, c: number) => [number, number];
export const wasmactivation_elu_derivative: (a: number, b: number, c: number) => [number, number];
export const wasmactivation_softplus: (a: number, b: number) => [number, number];
export const wasmactivation_softsign: (a: number, b: number) => [number, number];
export const wasmactivation_relu_2d: (a: number, b: number, c: number, d: number) => [number, number];
export const wasmactivation_softmax_2d: (a: number, b: number, c: number, d: number, e: number) => [number, number];
export const wasmactivation_apply_activation: (a: number, b: number, c: number, d: number) => [number, number];
export const wasmrng_next_u32: (a: number) => number;
export const wasmrng_next_f32: (a: number) => number;
export const __wbg_wasmnormal_free: (a: number, b: number) => void;
export const wasmnormal_new: (a: number, b: number, c: number) => number;
export const wasmnormal_standard: (a: number) => number;
export const wasmnormal_sample: (a: number) => number;
export const wasmnormal_sample_n: (a: number, b: number) => [number, number];
export const wasmnormal_pdf: (a: number, b: number) => number;
export const wasmnormal_log_pdf: (a: number, b: number) => number;
export const wasmnormal_cdf: (a: number, b: number) => number;
export const wasmnormal_std_dev: (a: number) => number;
export const wasmnormal_variance: (a: number) => number;
export const __wbg_wasmuniform_free: (a: number, b: number) => void;
export const wasmuniform_new: (a: number, b: number, c: number) => number;
export const wasmuniform_standard: (a: number) => number;
export const wasmuniform_sample: (a: number) => number;
export const wasmuniform_sample_n: (a: number, b: number) => [number, number];
export const wasmuniform_pdf: (a: number, b: number) => number;
export const wasmuniform_log_pdf: (a: number, b: number) => number;
export const wasmuniform_cdf: (a: number, b: number) => number;
export const wasmuniform_mean: (a: number) => number;
export const wasmuniform_variance: (a: number) => number;
export const __wbg_wasmbernoulli_free: (a: number, b: number) => void;
export const wasmbernoulli_new: (a: number, b: number) => [number, number, number];
export const wasmbernoulli_sample: (a: number) => number;
export const wasmbernoulli_sample_n: (a: number, b: number) => [number, number];
export const wasmbernoulli_pmf: (a: number, b: number) => number;
export const wasmbernoulli_log_pmf: (a: number, b: number) => number;
export const wasmbernoulli_mean: (a: number) => number;
export const wasmbernoulli_variance: (a: number) => number;
export const wasmexponential_new: (a: number, b: number) => [number, number, number];
export const wasmexponential_standard: (a: number) => number;
export const wasmexponential_sample: (a: number) => number;
export const wasmexponential_sample_n: (a: number, b: number) => [number, number];
export const wasmexponential_pdf: (a: number, b: number) => number;
export const wasmexponential_log_pdf: (a: number, b: number) => number;
export const wasmexponential_cdf: (a: number, b: number) => number;
export const wasmexponential_mean: (a: number) => number;
export const wasmexponential_variance: (a: number) => number;
export const wasmloss_mse_loss: (a: number, b: number, c: number, d: number) => number;
export const wasmloss_mae_loss: (a: number, b: number, c: number, d: number) => number;
export const wasmloss_huber_loss: (a: number, b: number, c: number, d: number, e: number) => number;
export const wasmloss_binary_cross_entropy_loss: (a: number, b: number, c: number, d: number) => number;
export const wasmloss_cross_entropy_loss: (a: number, b: number, c: number, d: number) => number;
export const wasmloss_sparse_cross_entropy_loss: (a: number, b: number, c: number, d: number, e: number) => number;
export const wasmloss_kl_divergence_loss: (a: number, b: number, c: number, d: number) => number;
export const wasmloss_focal_loss: (a: number, b: number, c: number, d: number, e: number, f: number) => number;
export const wasmloss_cosine_similarity_loss: (a: number, b: number, c: number, d: number) => number;
export const wasmloss_hinge_loss: (a: number, b: number, c: number, d: number) => number;
export const wasmloss_squared_hinge_loss: (a: number, b: number, c: number, d: number) => number;
export const wasmloss_log_cosh_loss: (a: number, b: number, c: number, d: number) => number;
export const wasmloss_compute_loss: (a: number, b: number, c: number, d: number, e: number, f: number) => number;
export const wasmloss_loss_gradient: (a: number, b: number, c: number, d: number, e: number, f: number) => [number, number];
export const __wbg_wasmtensorpool_free: (a: number, b: number) => void;
export const wasmtensorpool_new: (a: number) => number;
export const wasmtensorpool_allocate: (a: number, b: number) => number;
export const wasmtensorpool_deallocate: (a: number, b: number) => number;
export const wasmtensorpool_get_total_allocated: (a: number) => number;
export const wasmtensorpool_get_usage_stats: (a: number) => any;
export const wasmtensorpool_garbage_collect: (a: number) => number;
export const wasmtensorpool_clear: (a: number) => void;
export const __wbg_wasmtensorbuffer_free: (a: number, b: number) => void;
export const wasmtensorbuffer_new: (a: number, b: number, c: number, d: number) => number;
export const wasmtensorbuffer_from_pool: (a: number, b: number, c: number) => number;
export const wasmtensorbuffer_data: (a: number) => [number, number];
export const wasmtensorbuffer_shape: (a: number) => [number, number];
export const wasmtensorbuffer_memory_id: (a: number) => number;
export const wasmtensorbuffer_size_bytes: (a: number) => number;
export const wasmtensorbuffer_release_to_pool: (a: number, b: number) => number;
export const wasmmemorymonitor_new: () => number;
export const wasmmemorymonitor_record_allocation: (a: number, b: number) => void;
export const wasmmemorymonitor_record_deallocation: (a: number, b: number) => void;
export const wasmmemorymonitor_current_usage: (a: number) => number;
export const wasmmemorymonitor_peak_usage: (a: number) => number;
export const wasmmemorymonitor_reset: (a: number) => void;
export const wasmsgd_new: (a: number) => number;
export const wasmsgd_with_momentum: (a: number, b: number) => number;
export const wasmsgd_with_weight_decay: (a: number, b: number, c: number) => number;
export const wasmsgd_step: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => [number, number];
export const wasmsgd_get_learning_rate: (a: number) => number;
export const wasmsgd_set_learning_rate: (a: number, b: number) => void;
export const wasmsgd_zero_grad: (a: number) => void;
export const __wbg_wasmadam_free: (a: number, b: number) => void;
export const wasmadam_new: (a: number) => number;
export const wasmadam_with_params: (a: number, b: number, c: number, d: number, e: number) => number;
export const wasmadam_step: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => [number, number];
export const wasmadam_get_learning_rate: (a: number) => number;
export const wasmadam_set_learning_rate: (a: number, b: number) => void;
export const wasmadam_get_step_count: (a: number) => number;
export const wasmadam_reset: (a: number) => void;
export const __wbg_wasmadagrad_free: (a: number, b: number) => void;
export const wasmadagrad_new: (a: number, b: number) => number;
export const wasmadagrad_step: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => [number, number];
export const wasmrmsprop_new: (a: number, b: number, c: number) => number;
export const wasmrmsprop_with_momentum: (a: number, b: number, c: number, d: number) => number;
export const wasmrmsprop_step: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => [number, number];
export const __wbg_wasmlrscheduler_free: (a: number, b: number) => void;
export const wasmlrscheduler_step_lr: (a: number, b: number, c: number) => number;
export const wasmlrscheduler_exponential_lr: (a: number, b: number) => number;
export const wasmlrscheduler_cosine_annealing_lr: (a: number, b: number, c: number) => number;
export const wasmlrscheduler_step: (a: number) => number;
export const wasmlrscheduler_get_lr: (a: number) => number;
export const wasmlrscheduler_reset: (a: number) => void;
export const wasmoptimizerfactory_create_sgd: (a: number, b: number, c: number) => number;
export const wasmoptimizerfactory_create_adam: (a: number, b: number, c: number, d: number, e: number) => number;
export const wasmoptimizerfactory_create_adagrad: (a: number, b: number) => number;
export const wasmoptimizerfactory_create_rmsprop: (a: number, b: number, c: number, d: number) => number;
export const wasmperformance_new: () => number;
export const wasmperformance_start: (a: number) => void;
export const wasmperformance_elapsed: (a: number) => number;
export const wasmperformance_log: (a: number, b: number, c: number) => void;
export const detect_wasm_features: () => any;
export const wasmlogger_info: (a: number, b: number) => void;
export const wasmlogger_warn: (a: number, b: number) => void;
export const wasmlogger_error: (a: number, b: number) => void;
export const wasmlogger_debug: (a: number, b: number) => void;
export const wasmsignal_dft: (a: number, b: number) => any;
export const wasmsignal_idft: (a: number, b: number, c: number, d: number) => any;
export const wasmsignal_rfft: (a: number, b: number) => any;
export const wasmsignal_power_spectrum: (a: number, b: number) => [number, number];
export const wasmsignal_hamming_window: (a: number, b: number) => [number, number];
export const wasmsignal_hanning_window: (a: number, b: number) => [number, number];
export const wasmsignal_blackman_window: (a: number, b: number) => [number, number];
export const wasmsignal_magnitude_spectrum: (a: number, b: number, c: number, d: number) => [number, number];
export const wasmsignal_phase_spectrum: (a: number, b: number, c: number, d: number) => [number, number];
export const wasmsignal_fft_frequencies: (a: number, b: number) => [number, number];
export const wasmsignal_rfft_frequencies: (a: number, b: number) => [number, number];
export const wasmsignal_low_pass_filter: (a: number, b: number, c: number) => [number, number];
export const wasmsignal_high_pass_filter: (a: number, b: number, c: number) => [number, number];
export const wasmsignal_cross_correlation: (a: number, b: number, c: number, d: number) => [number, number];
export const wasmsignal_autocorrelation: (a: number, b: number) => [number, number];
export const wasmsignal_generate_sine_wave: (a: number, b: number, c: number, d: number, e: number) => [number, number];
export const wasmsignal_generate_cosine_wave: (a: number, b: number, c: number, d: number, e: number) => [number, number];
export const wasmsignal_generate_white_noise: (a: number, b: number, c: number) => [number, number];
export const wasmsignal_signal_energy: (a: number, b: number) => number;
export const wasmsignal_signal_power: (a: number, b: number) => number;
export const wasmsignal_rms_amplitude: (a: number, b: number) => number;
export const wasmsignal_find_peaks: (a: number, b: number, c: number) => [number, number];
export const wasmsignal_apply_gain: (a: number, b: number, c: number) => [number, number];
export const wasmsignal_normalize_signal: (a: number, b: number) => [number, number];
export const wasmsignal_zero_crossing_rate: (a: number, b: number) => number;
export const wasmspecial_gamma: (a: number) => number;
export const wasmspecial_lgamma: (a: number) => number;
export const wasmspecial_digamma: (a: number) => number;
export const wasmspecial_erf: (a: number) => number;
export const wasmspecial_erfc: (a: number) => number;
export const wasmspecial_beta: (a: number, b: number) => number;
export const wasmspecial_bessel_j0: (a: number) => number;
export const wasmspecial_bessel_j1: (a: number) => number;
export const wasmspecial_bessel_i0: (a: number) => number;
export const wasmtensorspecial_tensor_gamma: (a: number) => number;
export const wasmtensorspecial_tensor_lgamma: (a: number) => number;
export const wasmtensorspecial_tensor_erf: (a: number) => number;
export const wasmtensorspecial_tensor_bessel_j0: (a: number) => number;
export const wasmmetrics_accuracy: (a: number, b: number, c: number, d: number) => number;
export const wasmmetrics_precision: (a: number, b: number, c: number, d: number, e: number) => number;
export const wasmmetrics_recall: (a: number, b: number, c: number, d: number, e: number) => number;
export const wasmmetrics_f1_score: (a: number, b: number, c: number, d: number, e: number) => number;
export const wasmmetrics_confusion_matrix: (a: number, b: number, c: number, d: number, e: number) => [number, number];
export const wasmmetrics_mae: (a: number, b: number, c: number, d: number) => number;
export const wasmmetrics_mse: (a: number, b: number, c: number, d: number) => number;
export const wasmmetrics_rmse: (a: number, b: number, c: number, d: number) => number;
export const wasmmetrics_r2_score: (a: number, b: number, c: number, d: number) => number;
export const wasmmetrics_top_k_accuracy: (a: number, b: number, c: number, d: number, e: number, f: number) => number;
export const wasmmetrics_classification_report: (a: number, b: number, c: number, d: number, e: number) => any;
export const __wbg_wasmbatchnorm_free: (a: number, b: number) => void;
export const wasmbatchnorm_new: (a: number, b: number, c: number) => number;
export const wasmbatchnorm_set_training: (a: number, b: number) => void;
export const wasmbatchnorm_set_gamma: (a: number, b: number, c: number) => void;
export const wasmbatchnorm_set_beta: (a: number, b: number, c: number) => void;
export const wasmbatchnorm_forward: (a: number, b: number, c: number, d: number) => [number, number];
export const wasmbatchnorm_get_running_mean: (a: number) => [number, number];
export const wasmbatchnorm_get_running_var: (a: number) => [number, number];
export const __wbg_wasmlayernorm_free: (a: number, b: number) => void;
export const wasmlayernorm_new: (a: number, b: number, c: number) => number;
export const wasmlayernorm_set_gamma: (a: number, b: number, c: number) => void;
export const wasmlayernorm_set_beta: (a: number, b: number, c: number) => void;
export const wasmlayernorm_forward: (a: number, b: number, c: number) => [number, number];
export const __wbg_wasmgroupnorm_free: (a: number, b: number) => void;
export const wasmgroupnorm_new: (a: number, b: number, c: number) => number;
export const wasmgroupnorm_set_gamma: (a: number, b: number, c: number) => void;
export const wasmgroupnorm_set_beta: (a: number, b: number, c: number) => void;
export const wasmgroupnorm_forward: (a: number, b: number, c: number, d: number, e: number, f: number) => [number, number];
export const wasmpreprocessor_min_max_normalize: (a: number, b: number, c: number, d: number) => [number, number];
export const wasmpreprocessor_z_score_normalize: (a: number, b: number, c: number, d: number) => [number, number];
export const wasmpreprocessor_compute_stats: (a: number, b: number) => [number, number];
export const wasmpreprocessor_one_hot_encode: (a: number, b: number, c: number) => [number, number];
export const wasmpreprocessor_one_hot_decode: (a: number, b: number, c: number) => [number, number];
export const wasmpreprocessor_add_gaussian_noise: (a: number, b: number, c: number, d: number, e: number) => [number, number];
export const wasmpreprocessor_train_test_split: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => any;
export const wasmpreprocessor_create_batches: (a: number, b: number, c: number, d: number, e: number, f: number) => any;
export const wasmtensorops_matmul: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => [number, number];
export const wasmtensorops_transpose: (a: number, b: number, c: number, d: number) => [number, number];
export const wasmtensorops_reshape: (a: number, b: number, c: number, d: number) => [number, number];
export const wasmtensorops_concatenate: (a: any, b: any, c: number) => any;
export const wasmtensorops_split: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => any;
export const wasmtensorops_dot_product: (a: number, b: number, c: number, d: number) => number;
export const wasmtensorops_element_wise_add: (a: number, b: number, c: number, d: number) => [number, number];
export const wasmtensorops_element_wise_mul: (a: number, b: number, c: number, d: number) => [number, number];
export const wasmtensorops_element_wise_sub: (a: number, b: number, c: number, d: number) => [number, number];
export const wasmtensorops_element_wise_div: (a: number, b: number, c: number, d: number) => [number, number];
export const wasmtensorops_reduce_sum: (a: number, b: number, c: number, d: number, e: number) => any;
export const wasmtensorops_reduce_mean: (a: number, b: number, c: number, d: number, e: number) => any;
export const wasmtensorops_broadcast_add: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => any;
export const wasmtensorops_clip_gradients: (a: number, b: number, c: number) => [number, number];
export const wasmtensorops_dropout: (a: number, b: number, c: number, d: number, e: number) => [number, number];
export const wasmvision_resize: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => [number, number, number, number];
export const wasmvision_normalize: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => [number, number, number, number];
export const wasmvision_rgb_to_grayscale: (a: number, b: number, c: number, d: number) => [number, number, number, number];
export const wasmvision_gaussian_blur: (a: number, b: number, c: number, d: number, e: number, f: number) => [number, number, number, number];
export const wasmvision_crop: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number) => [number, number, number, number];
export const wasmvision_flip_horizontal: (a: number, b: number, c: number, d: number, e: number) => [number, number, number, number];
export const wasmvision_flip_vertical: (a: number, b: number, c: number, d: number, e: number) => [number, number, number, number];
export const wasmvision_rotate_90_cw: (a: number, b: number, c: number, d: number, e: number) => [number, number, number, number];
export const wasmvision_center_crop: (a: number, b: number, c: number, d: number, e: number, f: number) => [number, number, number, number];
export const wasmvision_adjust_brightness: (a: number, b: number, c: number) => [number, number];
export const wasmvision_adjust_contrast: (a: number, b: number, c: number) => [number, number];
export const wasmvision_add_gaussian_noise: (a: number, b: number, c: number) => [number, number];
export const wasmvision_random_rotation: (a: number, b: number, c: number, d: number, e: number, f: number) => [number, number, number, number];
export const wasmvision_edge_detection: (a: number, b: number, c: number, d: number) => [number, number, number, number];
export const wasmvision_to_float: (a: number, b: number) => [number, number];
export const wasmvision_to_uint8: (a: number, b: number) => [number, number];
export const wasmvision_histogram: (a: number, b: number, c: number) => [number, number];
export const wasmvision_histogram_equalization: (a: number, b: number, c: number) => [number, number];
export const wasmtransformpipeline_add_transform: (a: number, b: number, c: number) => [number, number];
export const wasmtransformpipeline_clear: (a: number) => void;
export const wasmtransformpipeline_execute: (a: number, b: number) => [number, number, number];
export const wasmtransformpipeline_get_stats: (a: number) => [number, number];
export const __wbg_wasmprocessingpipeline_free: (a: number, b: number) => void;
export const wasmprocessingpipeline_new: (a: number) => number;
export const wasmprocessingpipeline_add_operation: (a: number, b: number, c: number) => [number, number];
export const wasmprocessingpipeline_get_config: (a: number) => [number, number];
export const wasmadvancedmath_sinh: (a: number, b: number) => [number, number, number];
export const wasmadvancedmath_cosh: (a: number, b: number) => [number, number, number];
export const wasmadvancedmath_tanh: (a: number, b: number) => [number, number, number];
export const wasmadvancedmath_asin: (a: number, b: number) => [number, number, number];
export const wasmadvancedmath_acos: (a: number, b: number) => [number, number, number];
export const wasmadvancedmath_atan: (a: number, b: number) => [number, number, number];
export const wasmadvancedmath_atan2: (a: number, b: number, c: number) => [number, number, number];
export const wasmadvancedmath_erf: (a: number, b: number) => [number, number, number];
export const wasmadvancedmath_erfc: (a: number, b: number) => [number, number, number];
export const wasmadvancedmath_gamma: (a: number, b: number) => [number, number, number];
export const wasmadvancedmath_lgamma: (a: number, b: number) => [number, number, number];
export const wasmadvancedmath_clamp: (a: number, b: number, c: number, d: number) => [number, number, number];
export const wasmadvancedmath_sign: (a: number, b: number) => [number, number, number];
export const wasmadvancedmath_lerp: (a: number, b: number, c: number, d: number) => [number, number, number];
export const wasmadvancedmath_pow: (a: number, b: number, c: number) => [number, number, number];
export const wasmadvancedmath_pow_tensor: (a: number, b: number, c: number) => [number, number, number];
export const wasmadvancedmath_round: (a: number, b: number) => [number, number, number];
export const wasmadvancedmath_floor: (a: number, b: number) => [number, number, number];
export const wasmadvancedmath_ceil: (a: number, b: number) => [number, number, number];
export const wasmadvancedmath_trunc: (a: number, b: number) => [number, number, number];
export const wasmadvancedmath_is_finite: (a: number, b: number) => [number, number, number];
export const wasmadvancedmath_is_infinite: (a: number, b: number) => [number, number, number];
export const wasmadvancedmath_is_nan: (a: number, b: number) => [number, number, number];
export const wasmstatisticalfunctions_correlation: (a: number, b: number, c: number) => [number, number, number];
export const wasmstatisticalfunctions_covariance: (a: number, b: number, c: number) => [number, number, number];
export const wasmstatisticalfunctions_percentile: (a: number, b: number, c: number) => [number, number, number];
export const wasmstatisticalfunctions_quantiles: (a: number, b: number, c: number, d: number) => [number, number, number];
export const wasm_advanced_math_version: () => [number, number];
export const __wbg_wasmanomalydetector_free: (a: number, b: number) => void;
export const wasmanomalydetector_new: (a: number, b: number) => [number, number, number];
export const wasmanomalydetector_detect_statistical: (a: number, b: number) => [number, number, number];
export const wasmanomalydetector_detect_isolation_forest: (a: number, b: number, c: number) => [number, number, number];
export const wasmanomalydetector_detect_realtime: (a: number, b: number) => [number, number, number];
export const wasmanomalydetector_get_statistics: (a: number) => [number, number, number, number];
export const wasmanomalydetector_reset: (a: number) => void;
export const wasmanomalydetector_set_threshold: (a: number, b: number) => [number, number];
export const wasmanomalydetector_get_threshold: (a: number) => number;
export const __wbg_wasmtimeseriesdetector_free: (a: number, b: number) => void;
export const wasmtimeseriesdetector_new: (a: number, b: number) => [number, number, number];
export const wasmtimeseriesdetector_add_point: (a: number, b: number, c: number) => [number, number, number];
export const wasmtimeseriesdetector_get_trend_analysis: (a: number) => [number, number, number, number];
export const wasmtimeseriesdetector_get_seasonal_analysis: (a: number) => [number, number, number, number];
export const wasm_anomaly_detection_version: () => [number, number];
export const create_simple_detector: (a: number) => [number, number, number];
export const create_streaming_detector: (a: number) => [number, number, number];
export const detect_anomalies_batch: (a: number, b: number, c: number) => [number, number, number];
export const __wbg_wasmnormalize_free: (a: number, b: number) => void;
export const wasmnormalize_new: (a: number, b: number, c: number, d: number) => [number, number, number];
export const wasmnormalize_apply: (a: number, b: number) => [number, number, number];
export const wasmnormalize_name: (a: number) => [number, number];
export const __wbg_wasmresize_free: (a: number, b: number) => void;
export const wasmresize_new: (a: number, b: number, c: number, d: number) => [number, number, number];
export const wasmresize_apply: (a: number, b: number) => [number, number, number];
export const wasmresize_name: (a: number) => [number, number];
export const wasmcentercrop_new: (a: number, b: number) => [number, number, number];
export const wasmcentercrop_apply: (a: number, b: number) => [number, number, number];
export const wasmcentercrop_name: (a: number) => [number, number];
export const wasmrandomcrop_new: (a: number, b: number, c: number) => [number, number, number];
export const wasmrandomcrop_apply: (a: number, b: number) => [number, number, number];
export const wasmrandomcrop_name: (a: number) => [number, number];
export const __wbg_wasmcolorjitter_free: (a: number, b: number) => void;
export const wasmcolorjitter_new: (a: number, b: number, c: number, d: number) => [number, number, number];
export const wasmcolorjitter_apply: (a: number, b: number) => [number, number, number];
export const wasmcolorjitter_name: (a: number) => [number, number];
export const wasmtotensor_apply: (a: number, b: number) => [number, number, number];
export const wasmtotensor_name: (a: number) => [number, number];
export const wasm_transforms_version: () => [number, number];
export const create_imagenet_preprocessing: () => [number, number, number];
export const create_cifar_preprocessing: () => [number, number, number];
export const wasmqualitymetrics_new: (a: number) => [number, number, number];
export const wasmqualitymetrics_completeness: (a: number, b: number) => [number, number, number];
export const wasmqualitymetrics_accuracy: (a: number, b: number, c: number, d: number) => [number, number, number];
export const wasmqualitymetrics_consistency: (a: number, b: number) => [number, number, number];
export const wasmqualitymetrics_validity: (a: number, b: number) => [number, number, number];
export const wasmqualitymetrics_uniqueness: (a: number, b: number) => [number, number, number];
export const wasmqualitymetrics_overall_quality: (a: number, b: number) => [number, number, number];
export const wasmqualitymetrics_quality_report: (a: number, b: number) => [number, number, number, number];
export const wasmstatisticalanalyzer_basic_stats: (a: number, b: number) => [number, number, number, number];
export const wasmstatisticalanalyzer_percentiles: (a: number, b: number, c: number, d: number) => [number, number, number];
export const wasmstatisticalanalyzer_detect_outliers: (a: number, b: number) => [number, number, number];
export const wasm_quality_metrics_version: () => [number, number];
export const create_quality_analyzer: () => [number, number, number];
export const quick_quality_assessment: (a: number) => [number, number, number, number];
export const gamma_wasm: (a: number) => number;
export const lgamma_wasm: (a: number) => number;
export const digamma_wasm: (a: number) => number;
export const beta_wasm: (a: number, b: number) => number;
export const lbeta_wasm: (a: number, b: number) => number;
export const bessel_j_wasm: (a: number, b: number) => number;
export const bessel_y_wasm: (a: number, b: number) => number;
export const bessel_i_wasm: (a: number, b: number) => number;
export const bessel_k_wasm: (a: number, b: number) => number;
export const erf_wasm: (a: number) => number;
export const erfc_wasm: (a: number) => number;
export const erfinv_wasm: (a: number) => number;
export const erfcinv_wasm: (a: number) => number;
export const gamma_array_wasm: (a: number, b: number) => [number, number];
export const bessel_j_array_wasm: (a: number, b: number, c: number) => [number, number];
export const erf_array_wasm: (a: number, b: number) => [number, number];
export const factorial_wasm: (a: number) => number;
export const log_factorial_wasm: (a: number) => number;
export const __wbg_specialfunctionsbatch_free: (a: number, b: number) => void;
export const specialfunctionsbatch_gamma_batch: (a: number, b: number, c: number) => [number, number];
export const specialfunctionsbatch_bessel_j0_batch: (a: number, b: number, c: number) => [number, number];
export const specialfunctionsbatch_erf_batch: (a: number, b: number, c: number) => [number, number];
export const euler_gamma: () => number;
export const sqrt_2pi: () => number;
export const log_sqrt_2pi: () => number;
export const normaldistributionwasm_sample: (a: number) => number;
export const normaldistributionwasm_sample_array: (a: number, b: number) => [number, number];
export const normaldistributionwasm_log_prob: (a: number, b: number) => number;
export const normaldistributionwasm_log_prob_array: (a: number, b: number, c: number) => [number, number];
export const normaldistributionwasm_variance: (a: number) => number;
export const uniformdistributionwasm_sample: (a: number) => number;
export const uniformdistributionwasm_sample_array: (a: number, b: number) => [number, number];
export const uniformdistributionwasm_log_prob: (a: number, b: number) => number;
export const uniformdistributionwasm_mean: (a: number) => number;
export const uniformdistributionwasm_variance: (a: number) => number;
export const exponentialdistributionwasm_sample: (a: number) => number;
export const exponentialdistributionwasm_sample_array: (a: number, b: number) => [number, number];
export const exponentialdistributionwasm_log_prob: (a: number, b: number) => number;
export const exponentialdistributionwasm_mean: (a: number) => number;
export const exponentialdistributionwasm_variance: (a: number) => number;
export const gammadistributionwasm_sample: (a: number) => number;
export const gammadistributionwasm_sample_array: (a: number, b: number) => [number, number];
export const gammadistributionwasm_log_prob: (a: number, b: number) => number;
export const gammadistributionwasm_mean: (a: number) => number;
export const gammadistributionwasm_variance: (a: number) => number;
export const __wbg_betadistributionwasm_free: (a: number, b: number) => void;
export const betadistributionwasm_sample: (a: number) => number;
export const betadistributionwasm_sample_array: (a: number, b: number) => [number, number];
export const betadistributionwasm_log_prob: (a: number, b: number) => number;
export const betadistributionwasm_mean: (a: number) => number;
export const betadistributionwasm_variance: (a: number) => number;
export const __wbg_bernoullidistributionwasm_free: (a: number, b: number) => void;
export const bernoullidistributionwasm_sample: (a: number) => number;
export const bernoullidistributionwasm_sample_array: (a: number, b: number) => [number, number];
export const bernoullidistributionwasm_sample_f64: (a: number) => number;
export const bernoullidistributionwasm_sample_f64_array: (a: number, b: number) => [number, number];
export const bernoullidistributionwasm_log_prob: (a: number, b: number) => number;
export const bernoullidistributionwasm_variance: (a: number) => number;
export const normal_cdf_wasm: (a: number, b: number, c: number) => number;
export const normal_quantile_wasm: (a: number, b: number, c: number) => number;
export const quick_stats_wasm: (a: number, b: number) => [number, number];
export const benchmark_special_functions_wasm: (a: number) => [number, number];
export const __wbg_sgdwasm_free: (a: number, b: number) => void;
export const sgdwasm_new: (a: number, b: number, c: number, d: number, e: number) => number;
export const sgdwasm_step: (a: number, b: number, c: number, d: number, e: number, f: any, g: number, h: number) => void;
export const sgdwasm_reset_state: (a: number) => void;
export const __wbg_adamwasm_free: (a: number, b: number) => void;
export const adamwasm_new: (a: number, b: number, c: number, d: number, e: number) => number;
export const adamwasm_step: (a: number, b: number, c: number, d: number, e: number, f: any, g: number, h: number) => void;
export const adamwasm_get_learning_rate: (a: number) => number;
export const adamwasm_set_learning_rate: (a: number, b: number) => void;
export const adamwasm_get_step_count: (a: number) => bigint;
export const adamwasm_reset_state: (a: number) => void;
export const __wbg_rmspropwasm_free: (a: number, b: number) => void;
export const rmspropwasm_new: (a: number, b: number, c: number, d: number, e: number) => number;
export const rmspropwasm_step: (a: number, b: number, c: number, d: number, e: number, f: any, g: number, h: number) => void;
export const rmspropwasm_reset_state: (a: number) => void;
export const __wbg_adagradwasm_free: (a: number, b: number) => void;
export const adagradwasm_new: (a: number, b: number, c: number) => number;
export const adagradwasm_step: (a: number, b: number, c: number, d: number, e: number, f: any, g: number, h: number) => void;
export const adagradwasm_get_learning_rate: (a: number) => number;
export const adagradwasm_set_learning_rate: (a: number, b: number) => void;
export const adagradwasm_reset_state: (a: number) => void;
export const cosine_annealing_wasm: (a: number, b: bigint, c: bigint) => number;
export const __wbg_variablewasm_free: (a: number, b: number) => void;
export const variablewasm_new: (a: number, b: number, c: number, d: number, e: number) => number;
export const variablewasm_data: (a: number) => [number, number];
export const variablewasm_shape: (a: number) => [number, number];
export const variablewasm_grad: (a: number) => [number, number];
export const variablewasm_requires_grad: (a: number) => number;
export const variablewasm_zero_grad: (a: number) => void;
export const variablewasm_backward: (a: number) => void;
export const variablewasm_sum: (a: number) => number;
export const variablewasm_mean: (a: number) => number;
export const variablewasm_pow: (a: number, b: number) => number;
export const __wbg_computationgraphwasm_free: (a: number, b: number) => void;
export const computationgraphwasm_new: () => number;
export const computationgraphwasm_create_variable: (a: number, b: number, c: number, d: number, e: number, f: number) => [number, number];
export const computationgraphwasm_get_variable_data: (a: number, b: number, c: number) => [number, number];
export const computationgraphwasm_get_variable_grad: (a: number, b: number, c: number) => [number, number];
export const computationgraphwasm_add_variables: (a: number, b: number, c: number, d: number, e: number) => [number, number];
export const computationgraphwasm_mul_variables: (a: number, b: number, c: number, d: number, e: number) => [number, number];
export const computationgraphwasm_backward: (a: number, b: number, c: number) => void;
export const computationgraphwasm_zero_grad_all: (a: number) => void;
export const computationgraphwasm_clear_graph: (a: number) => void;
export const computationgraphwasm_variable_count: (a: number) => number;
export const __wbg_linearlayerwasm_free: (a: number, b: number) => void;
export const linearlayerwasm_new: (a: number, b: number) => number;
export const linearlayerwasm_forward: (a: number, b: number, c: number) => [number, number];
export const linearlayerwasm_get_weights: (a: number) => [number, number];
export const linearlayerwasm_get_bias: (a: number) => [number, number];
export const linearlayerwasm_update_weights: (a: number, b: number, c: number) => number;
export const linearlayerwasm_update_bias: (a: number, b: number, c: number) => number;
export const relu_wasm: (a: number) => number;
export const relu_array_wasm: (a: number, b: number) => [number, number];
export const sigmoid_array_wasm: (a: number, b: number) => [number, number];
export const tanh_array_wasm: (a: number, b: number) => [number, number];
export const softmax_wasm: (a: number, b: number) => [number, number];
export const webgpusimple_new: () => number;
export const webgpusimple_initialize: (a: number) => any;
export const webgpusimple_check_webgpu_support: (a: number) => any;
export const webgpusimple_tensor_add_cpu: (a: number, b: number, c: number, d: number, e: number) => [number, number, number, number];
export const webgpusimple_tensor_mul_cpu: (a: number, b: number, c: number, d: number, e: number) => [number, number, number, number];
export const webgpusimple_matrix_multiply_cpu: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => [number, number, number, number];
export const webgpusimple_relu_cpu: (a: number, b: number, c: number) => [number, number];
export const webgpusimple_sigmoid_cpu: (a: number, b: number, c: number) => [number, number];
export const webgpusimple_get_status: (a: number) => [number, number];
export const webgpusimple_get_chrome_info: (a: number) => [number, number];
export const get_browser_webgpu_info: () => [number, number];
export const calculate_performance_estimate: (a: number, b: number, c: number) => number;
export const webgpusimpledemo_new: () => number;
export const webgpusimpledemo_initialize: (a: number) => any;
export const webgpusimpledemo_run_tensor_addition_demo: (a: number) => [number, number, number, number];
export const webgpusimpledemo_run_matrix_multiplication_demo: (a: number) => [number, number, number, number];
export const webgpusimpledemo_run_activation_functions_demo: (a: number) => [number, number, number, number];
export const webgpusimpledemo_run_performance_benchmark: (a: number) => [number, number, number, number];
export const webgpusimpledemo_run_comprehensive_demo: (a: number) => any;
export const webgpusimpledemo_get_all_results: (a: number) => [number, number];
export const webgpusimpledemo_cleanup: (a: number) => void;
export const init_wasm: () => void;
export const initialize_wasm_runtime: () => void;
export const wasmtransformpipeline_length: (a: number) => number;
export const wasmprocessingpipeline_operation_count: (a: number) => number;
export const sigmoid_wasm: (a: number) => number;
export const wasmrng_new: (a: number) => number;
export const specialfunctionsbatch_new: (a: number) => number;
export const exponentialdistributionwasm_new: (a: number) => number;
export const bernoullidistributionwasm_new: (a: number) => number;
export const rmspropwasm_set_learning_rate: (a: number, b: number) => void;
export const sgdwasm_set_learning_rate: (a: number, b: number) => void;
export const learning_rate_schedule_wasm: (a: number, b: bigint, c: number, d: bigint) => number;
export const __wbg_wasmtransformpipeline_free: (a: number, b: number) => void;
export const __wbg_webgpusimpledemo_free: (a: number, b: number) => void;
export const __wbg_wasmsgd_free: (a: number, b: number) => void;
export const normaldistributionwasm_new: (a: number, b: number) => number;
export const uniformdistributionwasm_new: (a: number, b: number) => number;
export const gammadistributionwasm_new: (a: number, b: number) => number;
export const betadistributionwasm_new: (a: number, b: number) => number;
export const wasmrng_uniform: (a: number) => number;
export const __wbg_wasmtensor_free: (a: number, b: number) => void;
export const wasmnormal_mean: (a: number) => number;
export const normaldistributionwasm_mean: (a: number) => number;
export const normaldistributionwasm_std_dev: (a: number) => number;
export const bernoullidistributionwasm_mean: (a: number) => number;
export const rmspropwasm_get_learning_rate: (a: number) => number;
export const sgdwasm_get_learning_rate: (a: number) => number;
export const tanh_wasm: (a: number) => number;
export const __wbg_wasmrelu_free: (a: number, b: number) => void;
export const __wbg_fileloader_free: (a: number, b: number) => void;
export const __wbg_performancemonitor_free: (a: number, b: number) => void;
export const __wbg_jsinterop_free: (a: number, b: number) => void;
export const __wbg_optimizedops_free: (a: number, b: number) => void;
export const __wbg_parallelops_free: (a: number, b: number) => void;
export const __wbg_wasmactivation_free: (a: number, b: number) => void;
export const __wbg_wasmexponential_free: (a: number, b: number) => void;
export const __wbg_wasmloss_free: (a: number, b: number) => void;
export const __wbg_wasmmemorymonitor_free: (a: number, b: number) => void;
export const __wbg_wasmoptimizerfactory_free: (a: number, b: number) => void;
export const __wbg_wasmlogger_free: (a: number, b: number) => void;
export const __wbg_wasmsignal_free: (a: number, b: number) => void;
export const __wbg_wasmspecial_free: (a: number, b: number) => void;
export const __wbg_wasmtensorspecial_free: (a: number, b: number) => void;
export const __wbg_wasmmetrics_free: (a: number, b: number) => void;
export const __wbg_wasmpreprocessor_free: (a: number, b: number) => void;
export const __wbg_wasmtensorops_free: (a: number, b: number) => void;
export const __wbg_wasmvision_free: (a: number, b: number) => void;
export const __wbg_wasmadvancedmath_free: (a: number, b: number) => void;
export const __wbg_wasmstatisticalfunctions_free: (a: number, b: number) => void;
export const __wbg_wasmcentercrop_free: (a: number, b: number) => void;
export const __wbg_wasmrandomcrop_free: (a: number, b: number) => void;
export const __wbg_wasmtotensor_free: (a: number, b: number) => void;
export const __wbg_wasmrng_free: (a: number, b: number) => void;
export const __wbg_wasmstatisticalanalyzer_free: (a: number, b: number) => void;
export const __wbg_wasmqualitymetrics_free: (a: number, b: number) => void;
export const __wbg_uniformdistributionwasm_free: (a: number, b: number) => void;
export const __wbg_wasmperformance_free: (a: number, b: number) => void;
export const __wbg_normaldistributionwasm_free: (a: number, b: number) => void;
export const __wbg_gammadistributionwasm_free: (a: number, b: number) => void;
export const __wbg_exponentialdistributionwasm_free: (a: number, b: number) => void;
export const __wbg_webgpusimple_free: (a: number, b: number) => void;
export const wasmrelu_new: () => number;
export const browserstorage_new: () => number;
export const fileloader_new: () => number;
export const jsinterop_new: () => number;
export const optimizedops_new: () => number;
export const wasmadvancedmath_new: () => number;
export const wasmstatisticalfunctions_new: () => number;
export const wasmtotensor_new: () => number;
export const wasmstatisticalanalyzer_new: () => number;
export const wasmtransformpipeline_new: (a: number) => number;
export const __wbg_wasmrmsprop_free: (a: number, b: number) => void;
export const __wbindgen_exn_store: (a: number) => void;
export const __externref_table_alloc: () => number;
export const __wbindgen_export_2: WebAssembly.Table;
export const __wbindgen_free: (a: number, b: number, c: number) => void;
export const __wbindgen_malloc: (a: number, b: number) => number;
export const __wbindgen_realloc: (a: number, b: number, c: number, d: number) => number;
export const __wbindgen_export_6: WebAssembly.Table;
export const __externref_table_dealloc: (a: number) => void;
export const __externref_drop_slice: (a: number, b: number) => void;
export const closure55_externref_shim: (a: number, b: number, c: any) => void;
export const closure100_externref_shim: (a: number, b: number, c: any, d: any) => void;
export const __wbindgen_start: () => void;
