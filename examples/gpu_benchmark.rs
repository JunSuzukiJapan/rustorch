//! GPU Performance Benchmark Example
//! GPU„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„Éô„É≥„ÉÅ„Éû„Éº„ÇØ‰æã

#[cfg(not(target_arch = "wasm32"))]
use rustorch::gpu::simple_metal_test::{
    benchmark_metal_performance, test_metal_gpu_basic, test_metal_tensor_operations,
};

fn main() -> Result<(), Box<dyn std::error::Error>> {
    println!("üöÄ RusTorch GPU Performance Benchmark");
    println!("=====================================\n");

    #[cfg(not(target_arch = "wasm32"))]
    {
        // Test Metal GPU availability
        println!("1Ô∏è‚É£ Testing Metal GPU availability...");
        match test_metal_gpu_basic() {
            Ok(()) => println!("‚úÖ Metal GPU tests passed\n"),
            Err(e) => println!("‚ö†Ô∏è Metal GPU test failed: {}\n", e),
        }

        // Test tensor operations
        println!("2Ô∏è‚É£ Testing tensor operations...");
    }

    #[cfg(target_arch = "wasm32")]
    {
        println!("GPU operations are not available in WASM target.");
        println!("This benchmark shows CPU-only operations.\n");

        // WASM CPU benchmark
        wasm_cpu_benchmark()?;
    }
    #[cfg(not(target_arch = "wasm32"))]
    {
        match test_metal_tensor_operations() {
            Ok(()) => println!("‚úÖ Tensor operation tests passed\n"),
            Err(e) => println!("‚ùå Tensor operation test failed: {}\n", e),
        }

        // Run performance benchmark
        println!("3Ô∏è‚É£ Running performance benchmark...");
        match benchmark_metal_performance() {
            Ok(()) => println!("‚úÖ Performance benchmark completed\n"),
            Err(e) => println!("‚ùå Performance benchmark failed: {}\n", e),
        }
    }

    println!("üéØ Benchmark Summary:");
    println!("- RusTorch v0.4.0 Âü∫Êú¨Ê©üËÉΩ: ÂÆåÂÖ®Âãï‰Ωú ‚úÖ");
    println!("- CPU „ÉÜ„É≥„ÇΩ„É´Êìç‰Ωú: È´òÊÄßËÉΩ ‚ö°");
    println!("- GPU Ê©üËÉΩ: ÊÆµÈöéÁöÑÈñãÁô∫‰∏≠ üöß");
    println!("- AMD Radeon Pro Vega 56: Ê§úÂá∫„ÉªÂØæÂøú‰∫àÂÆö üîß\n");

    println!("üí° Recommendations:");
    println!("- ÁèæÂú®„ÅÆCPUÂÆüË£Ö„ÅØÊú¨Ê†ºÁöÑ„Å™Ê©üÊ¢∞Â≠¶Áøí„ÉØ„Éº„ÇØ„É≠„Éº„Éâ„Å´ÂØæÂøúÊ∏à„Åø");
    println!("- GPUÊ©üËÉΩ„ÅØÂÆâÂÖ®„Å™CPU fallback„ÅßÂãï‰Ωú‰øùË®º");
    println!("- MetalÂÆüË£Ö„ÅÆÊÆµÈöéÁöÑ„Å™Âæ©Êóß„ÇíÁ∂ôÁ∂ö‰∏≠");

    Ok(())
}

#[cfg(target_arch = "wasm32")]
fn wasm_cpu_benchmark() -> Result<(), Box<dyn std::error::Error>> {
    use rustorch::tensor::Tensor;
    use std::time::Instant;

    println!("1Ô∏è‚É£ WASM CPU Tensor Operations...");

    let sizes = vec![64, 128, 256];

    for size in sizes {
        println!("Testing {}x{} matrices:", size, size);

        let a = Tensor::<f32>::ones(&[size, size]);
        let b = Tensor::<f32>::ones(&[size, size]);

        let start = Instant::now();
        let result = a.matmul(&b)?;
        let time = start.elapsed();

        println!(
            "  Matrix multiplication: {:.3}ms",
            time.as_secs_f64() * 1000.0
        );
        assert_eq!(result.shape(), &[size, size]);
    }

    println!("‚úÖ WASM CPU operations completed successfully\n");
    Ok(())
}
