[package]
name = "rustorch"
version = "0.2.1"
edition = "2021"
authors = ["Jun Suzuki <jun.suzuki.japan@gmail.com>"]
description = "Production-ready PyTorch-compatible deep learning library in Rust with automatic differentiation, neural networks, complete GPU acceleration (CUDA/Metal/OpenCL), SIMD optimizations, parallel processing, comprehensive distributed learning support, and performance validation"
documentation = "https://docs.rs/rustorch"
homepage = "https://github.com/JunSuzukiJapan/rustorch"
repository = "https://github.com/JunSuzukiJapan/rustorch"
license = "MIT OR Apache-2.0"
readme = "README.md"
keywords = ["pytorch", "machine-learning", "tensor", "autograd", "neural-network"]
categories = ["science", "algorithms"]

[lib]
name = "rustorch"
path = "src/lib.rs"

[dependencies]
# Core dependencies
ndarray = { version = "0.15", features = ["rayon"] }
ndarray-rand = "0.14"
# blas-src = { version = "0.8", features = ["openblas"] }
# lapack-src = { version = "0.8", features = ["openblas"] }
rand = "0.8"
rand_distr = "0.4"
num-traits = "0.2"
num-complex = "0.4"
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
chrono = { version = "0.4", features = ["serde"] }
rayon = "1.7"
lazy_static = "1.4"

# Parallel processing
parking_lot = "0.12"  # For thread-safe locks

# Math and utilities
itertools = "0.10"  # For advanced iteration utilities
approx = "0.5"  # For floating point comparisons

# For GPU support (optional)
cudarc = { version = "0.11", features = ["driver", "cublas", "curand"], optional = true }
bindgen = { version = "0.69", optional = true }
cc = { version = "1.0", optional = true }
metal = { version = "0.29", optional = true }
objc = { version = "0.2", optional = true }
opencl3 = { version = "0.9", optional = true }

[dev-dependencies]
# Testing
rstest = "0.13"
criterion = "0.5"

[features]
default = ["cpu"]
cpu = []
# GPU acceleration backends (production-ready)
cuda = ["dep:cudarc", "dep:bindgen", "dep:cc"]  # NVIDIA CUDA with cuBLAS integration
metal = ["dep:metal", "dep:objc"]               # Apple Metal Performance Shaders
opencl = ["dep:opencl3"]                        # Cross-platform OpenCL kernels
all-gpu = ["cuda", "metal", "opencl"]           # Enable all GPU backends

[[bench]]
name = "tensor_ops"
harness = false

[[bench]]
name = "autograd_ops"
harness = false

[[bench]]
name = "neural_networks"
harness = false

[[bench]]
name = "optimized_ops"
harness = false

[[bench]]
name = "parallel_ops"
harness = false

[[bench]]
name = "memory_pool"
harness = false

# New comprehensive benchmark suites
[[bench]]
name = "parallel_performance"
harness = false

[[bench]]
name = "simd_performance"
harness = false

[[bench]]
name = "memory_strategy_performance"
harness = false

[[bench]]
name = "gpu_cpu_performance"
harness = false

[[bench]]
name = "integrated_performance"
harness = false

[[bench]]
name = "gpu_kernel_performance"
harness = false
