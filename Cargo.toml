[package]
name = "rustorch"
version = "0.4.0"
edition = "2021"
authors = ["Jun Suzuki <jun.suzuki.japan@gmail.com>"]
description = "Production-ready PyTorch-compatible deep learning library in Rust with special mathematical functions (gamma, Bessel, error functions), statistical distributions, Fourier transforms (FFT/RFFT), matrix decomposition (SVD/QR/LU/eigenvalue), automatic differentiation, neural networks, computer vision transforms, complete GPU acceleration (CUDA/Metal/OpenCL), SIMD optimizations, parallel processing, WebAssembly browser support, comprehensive distributed learning support, and performance validation"
documentation = "https://docs.rs/rustorch"
homepage = "https://github.com/JunSuzukiJapan/rustorch"
repository = "https://github.com/JunSuzukiJapan/rustorch"
license = "MIT OR Apache-2.0"
readme = "README.md"
keywords = ["pytorch", "machine-learning", "tensor", "fft", "matrix-decomposition"]
categories = ["science", "algorithms"]

[package.metadata.docs.rs]
# ドキュメントビルドの設定
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

[package.metadata.rust-analyzer]
# 開発時の依存関係の最適化
cargo.all_features = true

[workspace.metadata]
# ワークスペースのメタデータ
maintainer = "Jun Suzuki <jun.suzuki.japan@gmail.com>"
repository = "https://github.com/JunSuzukiJapan/rustorch"


[lib]
name = "rustorch"
path = "src/lib.rs"
crate-type = ["cdylib", "rlib"]

[dependencies]
# Core dependencies
ndarray = { version = "0.16.1", features = ["rayon", "approx"] }
ndarray-rand = "0.15.0"
ndarray-linalg = { version = "0.17.0", optional = true }
openblas-src = { version = "0.10", optional = true, features = ["cblas", "system"] }
cblas-sys = { version = "0.1", optional = true }
netlib-src = { version = "0.8", optional = true, features = ["system"] }
num-traits = "0.2"
num-complex = "0.4"
num_cpus = "1.16"
rand = { version = "0.8.5", features = ["std", "std_rng"] }
rand_distr = "0.4.3"
rayon = { version = "1.10.0" }
serde = { version = "1.0.202", features = ["derive", "rc"] }
serde_json = "1.0"
approx = "0.5"
lazy_static = "1.4"
parking_lot = "0.12"
hostname = "0.4"
crc32fast = "1.4"
tempfile = { version = "3.0", optional = true }
chrono = "0.4"
anyhow = "1.0"
thiserror = "1.0"
half = "2.2"

# Model import dependencies
protobuf = { version = "3.3", optional = true }
prost = { version = "0.12", optional = true }
prost-derive = { version = "0.12", optional = true }
prost-types = { version = "0.12", optional = true }
prost-build = { version = "0.12", optional = true }
bytes = { version = "1.5", optional = true }
base64 = { version = "0.21", optional = true }

# WebAssembly dependencies
wasm-bindgen = { version = "0.2", optional = true }
wasm-bindgen-futures = { version = "0.4", optional = true }
web-sys = { version = "0.3", optional = true, features = [
    "console", "Window", "Document", "Element", "HtmlElement", "HtmlInputElement",
    "HtmlCanvasElement", "CanvasRenderingContext2d", "Storage", "Worker", "Performance"
] }
js-sys = { version = "0.3", optional = true }
console_error_panic_hook = { version = "0.1", optional = true }

# GPU dependencies
cudarc = { version = "0.11", optional = true }
metal = { version = "0.27", optional = true }
objc = { version = "0.2", optional = true }
# objc_exception は macOS 専用の依存関係として後で追加します
opencl3 = { version = "0.9", optional = true }

# Distributed computing dependencies
mpi = { version = "0.6", optional = true }
nccl = { version = "0.6", optional = true }

[target.'cfg(target_arch = "wasm32")'.dependencies]
getrandom = { version = "0.2", features = ["js"] }
instant = { version = "0.1", features = ["wasm-bindgen"] }
safetensors = { version = "0.4", optional = true }
memmap2 = { version = "0.9", optional = true }
bytemuck = { version = "1.14", optional = true }
ort = { version = "2.0.0-rc.10", optional = true }
ndarray = { version = "0.16", optional = true }

[target.'cfg(target_os = "macos")'.dependencies]
objc_exception = { version = "0.1", optional = true }

[dev-dependencies]
criterion = { version = "0.5", features = ["html_reports"] }
wasm-bindgen-test = "0.3"
tempfile = "3.8"

[features]
default = ["linalg"]
linalg = ["dep:ndarray-linalg", "dep:openblas-src", "dep:cblas-sys"]
linalg-netlib = ["dep:ndarray-linalg", "dep:netlib-src"]
cuda = ["dep:cudarc"]
opencl = ["dep:opencl3"]
metal = ["dep:metal", "dep:objc", "dep:objc_exception"]
mpi = ["dep:mpi"]
nccl = ["dep:nccl"]
wasm = ["wasm-bindgen", "wasm-bindgen-futures", "web-sys", "js-sys", "console_error_panic_hook", "getrandom/js"]
model-import = ["dep:protobuf", "dep:prost", "dep:prost-derive", "dep:prost-types", "dep:prost-build", "dep:bytes", "dep:base64"]
safetensors = ["dep:safetensors", "dep:memmap2", "dep:bytemuck"]
onnx = ["dep:ort", "dep:ndarray"]

[profile.release]
opt-level = 3
lto = true
codegen-units = 1

# WebAssembly optimizations
[profile.wasm]
inherits = "release"
opt-level = "z"  # Optimize for size
lto = true
panic = "abort"

[[example]]
name = "autograd_demo"
path = "examples/autograd_demo.rs"

[[example]]
name = "cnn_demo"
path = "examples/cnn_demo.rs"

[[example]]
name = "transformer_demo"
path = "examples/transformer_demo.rs"

[[example]]
name = "vision_pipeline_demo"
path = "examples/vision_pipeline_demo.rs"

[[example]]
name = "backend_demo"
path = "examples/backend_demo.rs"

[[example]]
name = "svd_demo"
path = "examples/svd_demo.rs"
required-features = ["linalg"]

[[example]]
name = "eigenvalue_demo"
path = "examples/eigenvalue_demo.rs"
required-features = ["linalg"]

[[example]]
name = "matrix_decomposition_demo"
path = "examples/matrix_decomposition_demo.rs"
required-features = ["linalg"]

[[bench]]
name = "quick_benchmark"
harness = false

[[bench]]
name = "matrix_decomposition_benchmark"
harness = false
required-features = ["linalg"]

[[bench]]
name = "quick_matrix_benchmark"
harness = false
required-features = ["linalg"]

[[bench]]
name = "matrix_decomp_micro_bench"
harness = false
required-features = ["linalg"]

[[bench]]
name = "optimized_matrix_benchmark"
harness = false
required-features = ["linalg"]

[[bench]]
name = "manual_quick_bench"
harness = false

[[bench]]
name = "fft_benchmark"
harness = false

[[bench]]
name = "distributions_benchmark"
harness = false

[[bench]]
name = "quick_distributions_benchmark"
harness = false

[[bench]]
name = "micro_distributions_benchmark"
harness = false

[[bench]]
name = "simple_distributions_bench"
harness = false

[[bench]]
name = "special_functions_benchmark"
harness = false

