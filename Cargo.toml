[package]
name = "rustorch"
version = "0.6.30"
edition = "2021"
authors = ["Jun Suzuki <jun.suzuki.japan@gmail.com>"]
description = "Production-ready PyTorch-compatible deep learning library in Rust with special mathematical functions (gamma, Bessel, error functions), statistical distributions, Fourier transforms (FFT/RFFT), matrix decomposition (SVD/QR/LU/eigenvalue), automatic differentiation, neural networks, computer vision transforms, complete GPU acceleration (CUDA/Metal/OpenCL), SIMD optimizations, parallel processing, WebAssembly browser support, comprehensive distributed learning support, and performance validation"
documentation = "https://docs.rs/rustorch"
homepage = "https://github.com/JunSuzukiJapan/rustorch"
repository = "https://github.com/JunSuzukiJapan/rustorch"
license = "MIT OR Apache-2.0"
readme = "README.md"
keywords = ["pytorch", "machine-learning", "tensor", "fft", "matrix-decomposition"]
categories = ["science", "algorithms"]

[package.metadata.docs.rs]
# ドキュメントビルドの設定 - 外部依存関係のない機能のみ
features = ["wasm", "model-import"]
rustdoc-args = ["--cfg", "docsrs", "--allow", "rustdoc::broken_intra_doc_links"]
# GPU機能とMPI/NCCLは除外（外部ライブラリ依存関係を回避）
# 日本語テキストのfalse positiveリンクエラーを許可

[package.metadata.rust-analyzer]
# 開発時の依存関係の最適化
cargo.all_features = true

[workspace]
members = ["benchmarks", "rustorch-macros", "example-cli"]

[workspace.metadata]
# ワークスペースのメタデータ
maintainer = "Jun Suzuki <jun.suzuki.japan@gmail.com>"
repository = "https://github.com/JunSuzukiJapan/rustorch"


[lib]
name = "rustorch"
path = "src/lib.rs"
crate-type = ["cdylib", "rlib"]

[dependencies]
rustorch-macros = { path = "rustorch-macros", version = "0.6.29" }
# Core dependencies
ndarray = { version = "0.16.1", features = ["rayon", "approx"] }
ndarray-rand = "0.15.0"
ndarray-linalg = { version = "0.17.0", optional = true }
# BLAS dependencies moved to non-WASM targets
num-traits = "0.2"
num-complex = "0.4"
num_cpus = "1.16"
rand = { version = "0.8.5", features = ["std", "std_rng"] }
rand_distr = "0.4.3"
rayon = { version = "1.10.0" }
regex = "1.11.2"
serde = { version = "1.0.202", features = ["derive", "rc"] }
serde_json = "1.0"
serde_yaml = "0.9"
bincode = "1.3"
approx = "0.5"
lazy_static = "1.4"
parking_lot = "0.12"
libc = "0.2"
# hostname moved to non-WASM targets
crc32fast = "1.4"
tempfile = { version = "3.0", optional = true }
chrono = { version = "0.4", features = ["serde"] }
anyhow = "1.0"
thiserror = "1.0"
half = "2.2"

# Model import dependencies
protobuf = { version = "3.3", optional = true }
prost = { version = "0.12", optional = true }
prost-derive = { version = "0.12", optional = true }
prost-types = { version = "0.12", optional = true }
prost-build = { version = "0.12", optional = true }
bytes = { version = "1.5", optional = true }
base64 = { version = "0.21", optional = true }

# HTTP client for model downloads
reqwest = { version = "0.11", optional = true, features = ["stream", "json"] }
futures-util = { version = "0.3", optional = true }
tokio = { version = "1.0", optional = true, features = ["full"] }

# Cryptographic hashing for model verification
sha2 = { version = "0.10", optional = true }
md5 = { version = "0.7", optional = true }
digest = { version = "0.10", optional = true }

# Directory utilities
dirs = { version = "5.0", optional = true }

# Python bindings
pyo3 = { version = "0.24.1", optional = true, features = ["extension-module"] }
numpy = { version = "0.24", optional = true }

# Safetensors and ONNX dependencies
safetensors = "0.4"
memmap2 = "0.9"
bytemuck = "1.14"
ort = { version = "2.0.0-rc.10", optional = true }

# WebAssembly dependencies
wasm-bindgen = { version = "0.2", optional = true }
wasm-bindgen-futures = { version = "0.4", optional = true }
web-sys = { version = "0.3", optional = true, features = [
    "console", "Window", "Document", "Element", "HtmlElement", "HtmlInputElement",
    "HtmlCanvasElement", "CanvasRenderingContext2d", "Storage", "Worker", "Performance",
    "Navigator", "Gpu", "GpuDevice", "GpuQueue", "GpuBuffer", "GpuTexture",
    "IdbFactory", "IdbDatabase", "IdbTransaction", "IdbObjectStore", "IdbRequest", "IdbOpenDbRequest",
    "IdbTransactionMode", "Event", "EventTarget", "IdbVersionChangeEvent"
] }
js-sys = { version = "0.3", optional = true }
console_error_panic_hook = { version = "0.1", optional = true }

# WebGPU dependencies for Chrome browser GPU acceleration
wgpu = { version = "23.0", optional = true, features = ["webgl", "webgpu"] }
wgpu-hal = { version = "23.0", optional = true }
wgpu-core = { version = "23.0", optional = true }
wgpu-types = { version = "23.0", optional = true }

# GPU dependencies
cudarc = { version = "0.11", optional = true, features = ["f16", "cublas", "cuda-12050"] }
metal = { version = "0.32", optional = true }
objc = { version = "0.2", optional = true }
objc2-core-ml = { version = "0.2", optional = true }
objc2-foundation = { version = "0.2", optional = true }
# objc_exception は macOS 専用の依存関係として後で追加します
opencl3 = { version = "0.9", optional = true }

# Distributed computing dependencies
nccl = { version = "0.6", optional = true }

# BLAS dependencies - High Performance Linear Algebra
[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
openblas-src = { version = "0.10", optional = true, features = ["cblas", "system"] }
cblas-sys = { version = "0.1", optional = true }
blas = { version = "0.22", optional = true }
lapack = { version = "0.19", optional = true }
hostname = "0.4"

[target.'cfg(not(target_arch = "wasm32"))'.dev-dependencies]
criterion = { version = "0.5", features = ["html_reports"] }

[target.'cfg(target_arch = "wasm32")'.dependencies]
getrandom = { version = "0.2", features = ["js"] }
# instant crate is unmaintained, use web-time as replacement for WASM timing
web-time = "1.1"

[target.'cfg(target_os = "macos")'.dependencies]
objc_exception = { version = "0.1", optional = true }

[dev-dependencies]
# criterion moved to non-WASM targets
wasm-bindgen-test = "0.3"
tempfile = "3.8"

[features]
# Default features - WASM-compatible
default = []
# BLAS-dependent features - High Performance Linear Algebra
linalg = ["dep:ndarray-linalg", "dep:openblas-src", "dep:cblas-sys"]
linalg-system = ["dep:ndarray-linalg", "dep:blas", "dep:lapack"]
blas-optimized = ["dep:blas", "dep:lapack", "dep:openblas-src", "dep:cblas-sys"]
# WASM-safe default with core tensor operations
wasm-safe = []
cuda = ["dep:cudarc"]
opencl = ["dep:opencl3"]
metal = ["dep:metal", "dep:objc"]
nccl = ["dep:nccl"]
# CoreML support for Apple devices
coreml = ["dep:objc2-core-ml", "dep:objc2-foundation", "dep:metal"]
coreml-hybrid = ["coreml", "metal", "cuda"]  # CoreML + GPU hybrid execution
coreml-fallback = ["coreml-hybrid"]          # Automatic fallback system
# Mac-hybrid: Intelligent backend selection for macOS (Metal/CoreML)
mac-hybrid = ["metal", "coreml"]             # Automatic Metal/CoreML selection
# f32統一ハイブリッドシステム（実験的）
hybrid-f32 = ["metal", "coreml", "mac-hybrid"]  # f32 unified hybrid system (experimental)
wasm = ["wasm-bindgen", "wasm-bindgen-futures", "web-sys", "js-sys", "console_error_panic_hook", "getrandom/js"]
webgpu = ["wasm", "dep:wgpu", "dep:wgpu-hal", "dep:wgpu-core", "dep:wgpu-types"]
model-import = ["dep:protobuf", "dep:prost", "dep:prost-derive", "dep:prost-types", "dep:prost-build", "dep:bytes", "dep:base64"]
onnx = ["dep:ort"]
model-hub = ["dep:reqwest", "dep:futures-util", "dep:tokio", "dep:sha2", "dep:md5", "dep:digest", "dep:dirs", "model-import"]
python = ["dep:pyo3", "dep:numpy"]
ci-fast = []
memory-debug = []

[profile.release]
opt-level = 3
lto = true
codegen-units = 1

# WebAssembly optimizations
[profile.wasm]
inherits = "release"
opt-level = "z"  # Optimize for size
lto = true
panic = "abort"

[[example]]
name = "autograd_demo"
path = "examples/autograd_demo.rs"

[[example]]
name = "cnn_demo"
path = "examples/cnn_demo.rs"

# [[example]]
# name = "transformer_demo"
# path = "examples/transformer_demo.rs"

[[example]]
name = "vision_pipeline_demo"
path = "examples/vision_pipeline_demo.rs"


[[example]]
name = "svd_demo"
path = "examples/svd_demo.rs"
required-features = ["linalg"]

[[example]]
name = "eigenvalue_demo"
path = "examples/eigenvalue_demo.rs"
required-features = ["linalg"]

[[example]]
name = "matrix_decomposition_demo"
path = "examples/matrix_decomposition_demo.rs"
required-features = ["linalg"]

# [[example]]
# name = "metal_performance_demo"
# path = "examples/metal_performance_demo.rs"
# required-features = ["metal"]

# [[example]]
# name = "cuda_performance_demo"
# path = "examples/cuda_performance_demo.rs"
# required-features = ["cuda"]

# [[example]]
# name = "opencl_performance_demo"
# path = "examples/opencl_performance_demo.rs"
# required-features = ["opencl"]

# [[example]]
# name = "comprehensive_gpu_benchmark"
# path = "examples/comprehensive_gpu_benchmark.rs"
# required-features = []  # Runs with any available features

[[bench]]
name = "quick_benchmark"
path = "benches/quick_benchmark.rs"
harness = false

[[bench]]
name = "matrix_decomposition_benchmark"
path = "benches/matrix_decomposition_benchmark.rs"
harness = false
required-features = ["linalg"]

[[bench]]
name = "quick_matrix_benchmark"
path = "benches/quick_matrix_benchmark.rs"
harness = false
required-features = ["linalg"]

[[bench]]
name = "matrix_decomp_micro_bench"
path = "benches/matrix_decomp_micro_bench.rs"
harness = false
required-features = ["linalg"]

[[bench]]
name = "optimized_matrix_benchmark"
path = "benches/optimized_matrix_benchmark.rs"
harness = false
required-features = ["linalg"]

[[bench]]
name = "manual_quick_bench"
path = "benches/manual_quick_bench.rs"
harness = false
required-features = ["linalg"]

[[bench]]
name = "fft_benchmark"
path = "benches/fft_benchmark.rs"
harness = false

[[bench]]
name = "distributions_benchmark"
path = "benches/distributions_benchmark.rs"
harness = false

[[bench]]
name = "quick_distributions_benchmark"
path = "benches/quick_distributions_benchmark.rs"
harness = false

[[bench]]
name = "micro_distributions_benchmark"
path = "benches/micro_distributions_benchmark.rs"
harness = false

[[bench]]
name = "simple_distributions_bench"
path = "benches/simple_distributions_bench.rs"
harness = false

[[bench]]
name = "special_functions_benchmark"
path = "benches/special_functions_benchmark.rs"
harness = false

[[bench]]
name = "simple_gpu_bench"
path = "benches/simple_gpu_bench.rs"
harness = false

[[bench]]
name = "optimization_benchmark"
path = "benches/optimization_benchmark.rs"
harness = false

[[bench]]
name = "distributed_benchmark"
path = "benches/distributed_benchmark.rs"
harness = false


[[bench]]
name = "tensor_ops"
path = "benches/tensor_ops.rs"
harness = false

[[bench]]
name = "autograd_ops"
path = "benches/autograd_ops.rs"
harness = false

[[bench]]
name = "nn_benchmark"
path = "benches/nn_benchmark.rs"
harness = false

[[example]]
name = "model_hub_demo"
path = "examples/model_hub_demo.rs"
required-features = ["model-hub"]

[[example]]
name = "test_actual_download"
path = "examples/test_actual_download.rs"
required-features = ["model-hub"]

[[example]]
name = "webgpu_chrome_demo"
path = "examples/webgpu_chrome_demo.rs"
required-features = ["webgpu"]

[[example]]
name = "webgpu_simple_demo"
path = "examples/webgpu_simple_demo.rs"
required-features = ["webgpu"]

[[example]]
name = "distributed_training_demo"
path = "examples/distributed_training_demo.rs"
required-features = []

# hybrid_f32 examples
[[example]]
name = "hybrid_f32_performance_comparison"
path = "examples/hybrid_f32/performance_comparison.rs"
required-features = ["hybrid-f32"]

[[example]]
name = "hybrid_f32_demo"
path = "examples/hybrid_f32/demo.rs"
required-features = ["hybrid-f32"]

[[example]]
name = "hybrid_f32_quick_comparison"
path = "examples/hybrid_f32/quick_comparison.rs"
required-features = ["hybrid-f32"]

[[example]]
name = "hybrid_f32_phase1_test"
path = "examples/hybrid_f32/phase1_test.rs"
required-features = ["hybrid-f32"]

[[example]]
name = "hybrid_f32_phase2_test"
path = "examples/hybrid_f32/phase2_test.rs"
required-features = ["hybrid-f32"]

[[example]]
name = "hybrid_f32_phase3_test"
path = "examples/hybrid_f32/phase3_test.rs"
required-features = ["hybrid-f32"]

[[example]]
name = "hybrid_f32_phase4a_test"
path = "examples/hybrid_f32/phase4a_test.rs"
required-features = ["hybrid-f32"]

[[example]]
name = "hybrid_f32_phase4b_test"
path = "examples/hybrid_f32/phase4b_test.rs"
required-features = ["hybrid-f32"]

[[example]]
name = "hybrid_f32_phase4c_test"
path = "examples/hybrid_f32/phase4c_test.rs"
required-features = ["hybrid-f32"]

[[example]]
name = "hybrid_f32_phase5_test"
path = "examples/hybrid_f32/phase5_test.rs"
required-features = ["hybrid-f32"]

[[example]]
name = "gpu_neural_engine_benchmark"
path = "examples/hybrid_f32/gpu_neural_engine_benchmark.rs"
required-features = ["hybrid-f32"]

[[example]]
name = "comprehensive_performance_comparison"
path = "examples/comprehensive_performance_comparison.rs"
required-features = ["hybrid-f32"]

[lints.clippy]
# Allow common warnings in examples, tests, and benches
approx_constant = "allow"
identity_op = "allow"
needless_borrow = "allow"
needless_range_loop = "allow"
unit_arg = "allow"
useless_vec = "allow"
unnecessary_cast = "allow"
redundant_closure = "allow"
println_empty_string = "allow"
useless_asref = "allow"
needless_borrows_for_generic_args = "allow"
