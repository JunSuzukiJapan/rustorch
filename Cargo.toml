[package]
name = "rustorch"
version = "0.3.16"
edition = "2021"
authors = ["Jun Suzuki <jun.suzuki.japan@gmail.com>"]
description = "Production-ready PyTorch-compatible deep learning library in Rust with automatic differentiation, neural networks, computer vision transforms, complete GPU acceleration (CUDA/Metal/OpenCL), SIMD optimizations, parallel processing, WebAssembly browser support, comprehensive distributed learning support, and performance validation"
documentation = "https://docs.rs/rustorch"
homepage = "https://github.com/JunSuzukiJapan/rustorch"
repository = "https://github.com/JunSuzukiJapan/rustorch"
license = "MIT OR Apache-2.0"
readme = "README.md"
keywords = ["pytorch", "machine-learning", "tensor", "computer-vision", "webassembly"]
categories = ["science", "algorithms"]

[lib]
name = "rustorch"
path = "src/lib.rs"
crate-type = ["cdylib", "rlib"]

[dependencies]
# Core dependencies
ndarray = "0.15"
ndarray-rand = "0.14"
num-traits = "0.2"
rand = "0.8"
rand_distr = "0.4"
rayon = "1.5"
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
approx = "0.5"
lazy_static = "1.4"
parking_lot = "0.12"
chrono = "0.4"
anyhow = "1.0"
half = "2.2"

# Model import dependencies
protobuf = { version = "3.3", optional = true }
prost = { version = "0.12", optional = true }
prost-derive = { version = "0.12", optional = true }
prost-types = { version = "0.12", optional = true }
prost-build = { version = "0.12", optional = true }
bytes = { version = "1.5", optional = true }
base64 = { version = "0.21", optional = true }

# WebAssembly dependencies
wasm-bindgen = { version = "0.2", optional = true }
wasm-bindgen-futures = { version = "0.4", optional = true }
web-sys = { version = "0.3", optional = true, features = [
    "console", "Window", "Document", "Element", "HtmlElement", "HtmlInputElement",
    "HtmlCanvasElement", "CanvasRenderingContext2d", "Storage", "Worker", "Performance"
] }
js-sys = { version = "0.3", optional = true }
console_error_panic_hook = { version = "0.1", optional = true }

# GPU dependencies
cudarc = { version = "0.11", optional = true }
metal = { version = "0.27", optional = true }
objc = { version = "0.2", optional = true }
opencl3 = { version = "0.9", optional = true }

# Distributed computing dependencies
mpi = { version = "0.6", optional = true }
nccl = { version = "0.6", optional = true }

[target.'cfg(target_arch = "wasm32")'.dependencies]
getrandom = { version = "0.2", features = ["js"] }
instant = { version = "0.1", features = ["wasm-bindgen"] }

[dev-dependencies]
criterion = { version = "0.5", features = ["html_reports"] }
wasm-bindgen-test = "0.3"
tempfile = "3.8"

[features]
default = []
cuda = ["dep:cudarc"]
opencl = ["dep:opencl3"]
metal = ["dep:metal", "dep:objc"]
mpi = ["dep:mpi"]
nccl = ["dep:nccl"]
wasm = ["wasm-bindgen", "wasm-bindgen-futures", "web-sys", "js-sys", "console_error_panic_hook", "getrandom/js"]
model-import = ["dep:protobuf", "dep:prost", "dep:prost-derive", "dep:prost-types", "dep:prost-build", "dep:bytes", "dep:base64"]

[profile.release]
opt-level = 3
lto = true
codegen-units = 1

# WebAssembly optimizations
[profile.wasm]
inherits = "release"
opt-level = "z"  # Optimize for size
lto = true
panic = "abort"

[[example]]
name = "autograd_demo"
path = "examples/autograd_demo.rs"

[[example]]
name = "cnn_demo"
path = "examples/cnn_demo.rs"

[[example]]
name = "transformer_demo"
path = "examples/transformer_demo.rs"

[[example]]
name = "vision_pipeline_demo"
path = "examples/vision_pipeline_demo.rs"

[[bench]]
name = "quick_benchmark"
harness = false


[package.metadata.docs.rs]
features = ["cuda", "opencl", "metal", "mpi", "nccl"]