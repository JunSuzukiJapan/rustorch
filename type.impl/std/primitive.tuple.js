(function() {
    var type_impls = Object.fromEntries([["rustorch",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CComplex%3CT%3E%3E-for-(T,+T)\" class=\"impl\"><a class=\"src rightside\" href=\"src/rustorch/tensor/complex_impl/core.rs.html#283-287\">Source</a><a href=\"#impl-From%3CComplex%3CT%3E%3E-for-(T,+T)\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/float/trait.Float.html\" title=\"trait num_traits::float::Float\">Float</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"rustorch/tensor/complex_impl/core/struct.Complex.html\" title=\"struct rustorch::tensor::complex_impl::core::Complex\">Complex</a>&lt;T&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.tuple.html\">(T, T)</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rustorch/tensor/complex_impl/core.rs.html#284-286\">Source</a><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(z: <a class=\"struct\" href=\"rustorch/tensor/complex_impl/core/struct.Complex.html\" title=\"struct rustorch::tensor::complex_impl::core::Complex\">Complex</a>&lt;T&gt;) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Complex<T>>","rustorch::convert::parser::errors::ExecutionResult"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[1748]}