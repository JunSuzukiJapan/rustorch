#!/bin/bash

# RusTorch Universal Jupyter Installer
# 環境自動検出ワンライナーインストーラー

set -e

# Default installation path for launcher script
DEFAULT_INSTALL_PATH="$HOME/bin"
INSTALL_PATH="${RUSTORCH_INSTALL_PATH:-$DEFAULT_INSTALL_PATH}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo "🚀 RusTorch Universal Jupyter Installer"
echo "🚀 RusTorch万能Jupyterインストーラー"
echo ""

# Function to detect OS
detect_os() {
    case "$OSTYPE" in
        darwin*)  echo "macos" ;;
        linux*)   echo "linux" ;;
        msys*|mingw*|cygwin*) echo "windows" ;;
        *)        echo "unknown" ;;
    esac
}

# Function to detect CPU architecture
detect_cpu() {
    local arch=$(uname -m)
    case "$arch" in
        x86_64|amd64) echo "x64" ;;
        arm64|aarch64) echo "arm64" ;;
        armv7l) echo "arm32" ;;
        *) echo "unknown" ;;
    esac
}

# Function to detect GPU capabilities
detect_gpu() {
    local gpu_support=""
    
    # Check for NVIDIA GPU (CUDA)
    if command -v nvidia-smi >/dev/null 2>&1; then
        gpu_support="cuda"
    # Check for Apple Silicon (Metal)
    elif [[ "$(detect_os)" == "macos" ]] && [[ "$(detect_cpu)" == "arm64" ]]; then
        gpu_support="metal"
    # Check for AMD/Intel GPU (OpenCL) - basic check
    elif command -v clinfo >/dev/null 2>&1; then
        gpu_support="opencl"
    else
        gpu_support="cpu"
    fi
    
    echo "$gpu_support"
}

# Function to check browser compatibility for WebGPU
check_webgpu_support() {
    local os=$(detect_os)
    # WebGPU works best on Chrome/Chromium on all platforms
    if command -v google-chrome >/dev/null 2>&1 || 
       command -v chromium-browser >/dev/null 2>&1 || 
       command -v chromium >/dev/null 2>&1; then
        echo "true"
    else
        echo "false"
    fi
}

# Function to create launcher script
create_launcher() {
    local install_type="$1"
    local launcher_name="rustorch-jupyter"
    local launcher_path="$INSTALL_PATH/$launcher_name"
    
    # Create install directory if it doesn't exist
    mkdir -p "$INSTALL_PATH"
    
    cat > "$launcher_path" << EOF
#!/bin/bash
# RusTorch Jupyter Launcher - Generated by Universal Installer
# Installation type: $install_type

cd "\$(dirname "\$(readlink -f "\$0" 2>/dev/null || realpath "\$0" 2>/dev/null || echo "\$0")")/../.."
if [[ ! -f "Cargo.toml" ]] || ! grep -q "rustorch" "Cargo.toml" 2>/dev/null; then
    echo "⚠️  RusTorch project not found. Please run from RusTorch directory."
    echo "⚠️  RusTorchプロジェクトが見つかりません。RusTorchディレクトリから実行してください。"
    exit 1
fi

# Use the existing quick launcher
./start_jupyter_quick.sh
EOF
    
    chmod +x "$launcher_path"
    echo "$launcher_path"
}

# Function to add to PATH
add_to_path() {
    local install_dir="$1"
    local shell_rc=""
    
    # Detect shell and corresponding RC file
    if [[ "$SHELL" == *"zsh"* ]]; then
        shell_rc="$HOME/.zshrc"
    elif [[ "$SHELL" == *"bash"* ]]; then
        if [[ -f "$HOME/.bashrc" ]]; then
            shell_rc="$HOME/.bashrc"
        else
            shell_rc="$HOME/.bash_profile"
        fi
    elif [[ "$SHELL" == *"fish"* ]]; then
        shell_rc="$HOME/.config/fish/config.fish"
    fi
    
    # Check if PATH already contains the directory
    if [[ ":$PATH:" != *":$install_dir:"* ]]; then
        if [[ -n "$shell_rc" ]]; then
            echo "" >> "$shell_rc"
            echo "# Added by RusTorch installer" >> "$shell_rc"
            if [[ "$shell_rc" == *"fish"* ]]; then
                echo "set -gx PATH $install_dir \$PATH" >> "$shell_rc"
            else
                echo "export PATH=\"$install_dir:\$PATH\"" >> "$shell_rc"
            fi
            echo "✅ Added $install_dir to PATH in $shell_rc"
        fi
    fi
}

# Main detection and installation logic
main() {
    echo "🔍 Environment Detection / 環境検出"
    echo "=================================="
    
    local os=$(detect_os)
    local cpu=$(detect_cpu)
    local gpu=$(detect_gpu)
    local webgpu_support=$(check_webgpu_support)
    
    echo "OS: $os"
    echo "CPU: $cpu" 
    echo "GPU: $gpu"
    echo "WebGPU Support: $webgpu_support"
    echo ""
    
    # Determine best installation strategy
    local install_strategy=""
    local install_command=""
    
    # Store GPU-specific info for fallback
    local gpu_specific_strategy=""
    local gpu_specific_command=""
    
    if [[ "$gpu" == "cuda" ]]; then
        gpu_specific_strategy="CUDA GPU acceleration"
        gpu_specific_command="./start_jupyter.sh"
    elif [[ "$gpu" == "metal" ]]; then
        gpu_specific_strategy="Metal GPU acceleration"
        gpu_specific_command="./start_jupyter.sh"
    elif [[ "$webgpu_support" == "true" ]]; then
        gpu_specific_strategy="WebGPU browser acceleration"
        gpu_specific_command="./start_jupyter_webgpu.sh"
    else
        gpu_specific_strategy="CPU-optimized with Rust kernel"
        gpu_specific_command="./quick_start_rust_kernel.sh"
    fi
    
    # Default to hybrid
    install_strategy="Hybrid Python + Rust dual-kernel"
    install_command="./start_jupyter_hybrid.sh"
    
    echo -e "${GREEN}🎯 Default (Recommended): Hybrid Environment${NC}"
    echo -e "${GREEN}🎯 デフォルト（推奨）: ハイブリッド環境${NC}"
    echo "     🦀🐍 Dual-kernel Jupyter with both Python and Rust support"
    echo "     🦀🐍 Python環境とRust環境の両方をサポートするデュアルカーネル"
    echo ""
    echo -e "${BLUE}Alternative: $gpu_specific_strategy${NC}"
    echo "     GPU-optimized single environment"
    echo "     GPU最適化された単一環境"
    echo ""
    
    # Ask user for setup type (auto-select default for non-interactive mode)
    echo "Choose installation type:"
    echo "[1] Hybrid (Default - Python + Rust dual-kernel) ⭐"
    echo "[2] GPU-Optimized ($gpu_specific_strategy)"
    echo "[q] Cancel"
    echo ""
    
    # Check if running interactively
    if [[ -t 0 ]]; then
        read -p "Select [1/2/q] (default: 1): " -n 1 -r
        echo
    else
        echo "Non-interactive mode detected. Auto-selecting default option [1]..."
        REPLY="1"
    fi
    
    case $REPLY in
        1|"")
            echo "Using hybrid setup (default)..."
            ;;
        2)
            install_strategy="$gpu_specific_strategy"
            install_command="$gpu_specific_command"
            echo "Using GPU-optimized setup..."
            ;;
        q|Q)
            echo "Installation cancelled."
            exit 0
            ;;
        *)
            echo "Invalid selection. Using hybrid setup (default)..."
            ;;
    esac
    
    echo ""
    echo "🚀 Starting Installation / インストール開始"
    echo "==========================================="
    
    # Download and run the appropriate installation command
    local script_name=$(basename "$install_command")
    echo "📥 Downloading $script_name..."
    
    if curl -sSL "https://raw.githubusercontent.com/JunSuzukiJapan/rustorch/main/$script_name" -o "$script_name"; then
        chmod +x "$script_name"
        echo "✅ Downloaded $script_name successfully"
        eval "$install_command"
    else
        echo "❌ Failed to download $script_name"
        echo "🔄 Attempting alternative approach..."
        
        # Fallback: Try to clone the repository
        if command -v git >/dev/null 2>&1; then
            echo "📦 Cloning RusTorch repository..."
            git clone https://github.com/JunSuzukiJapan/rustorch.git rustorch-temp
            cd rustorch-temp
            chmod +x *.sh
            eval "$install_command"
            cd ..
            rm -rf rustorch-temp
        else
            echo "❌ Git not found. Please install git or download the repository manually."
            exit 1
        fi
    fi
    
    echo ""
    echo "📦 Creating launcher script / ランチャースクリプト作成"
    echo "=================================================="
    
    # Create launcher script
    local launcher_path=$(create_launcher "$install_strategy")
    echo -e "${GREEN}✅ Launcher created: $launcher_path${NC}"
    
    # Add to PATH
    add_to_path "$INSTALL_PATH"
    
    echo ""
    echo -e "${GREEN}🎉 Installation Complete! / インストール完了！${NC}"
    echo "=============================================="
    echo ""
    echo "📋 Usage / 使用方法:"
    echo "  1. Restart your terminal / ターミナルを再起動"
    echo "  2. Run anywhere: ${BLUE}rustorch-jupyter${NC}"
    echo "  3. Or directly: ${BLUE}$launcher_path${NC}"
    echo ""
    echo "🔧 Customization / カスタマイズ:"
    echo "  Install path: ${BLUE}RUSTORCH_INSTALL_PATH=/custom/path $0${NC}"
    echo ""
}

# Handle command line arguments
if [[ "$1" == "--help" ]] || [[ "$1" == "-h" ]]; then
    echo "RusTorch Universal Jupyter Installer"
    echo ""
    echo "Usage:"
    echo "  $0                    # Install with auto-detection"
    echo "  $0 --help            # Show this help"
    echo ""
    echo "Environment Variables:"
    echo "  RUSTORCH_INSTALL_PATH # Custom install path (default: ~/bin)"
    echo ""
    exit 0
fi

# Run main installation
main