name: Nightly Tests

on:
  schedule:
    # Run at 2 AM UTC every day
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  nightly-tests:
    name: Extended Nightly Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt, clippy, miri

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install pkg-config
          brew install openblas
        shell: bash

      - name: Install MPI (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libopenmpi-dev openmpi-bin pkg-config
        shell: bash

      - name: Run extended tests
        run: |
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            # On macOS, enable metal feature
            cargo test --verbose --features "metal" --release
            cargo test --verbose --features "metal" --release --examples
          elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            # On Linux, enable all features except macOS-specific ones
            cargo test --verbose --features "linalg-netlib,mpi" --release
            cargo test --verbose --features "linalg-netlib,mpi" --release --examples
          else
            # On Windows, enable all features except platform-specific ones
            cargo test --verbose --features "linalg-netlib" --release
            cargo test --verbose --features "linalg-netlib" --release --examples
          fi
        shell: bash

      - name: Run Miri tests (unsafe code validation)
        if: runner.os == 'Linux'
        run: |
          cargo miri setup
          cargo miri test --lib
        shell: bash

      - name: Stress test with high iterations
        run: |
          RUST_LOG=debug cargo test --release stress_test -- --ignored --test-threads=1
        shell: bash

      - name: Memory leak detection
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y valgrind
          cargo build --release --examples
          valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all \
            ./target/release/examples/neural_network_demo || true
        shell: bash

  performance-regression:
    name: Performance Regression Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Run performance benchmarks
        run: |
          cargo bench --features "linalg-netlib" -- --output-format json > benchmark-results.json
        shell: bash

      - name: Compare with baseline
        run: |
          # Store results for trend analysis
          echo "Benchmark results stored for regression analysis"
          cat benchmark-results.json
        shell: bash

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: nightly-benchmarks
          path: benchmark-results.json