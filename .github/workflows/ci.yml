name: RusTorch CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      toolchain:
        description: 'Rust toolchain version'
        required: false
        default: 'stable'
        type: choice
        options:
        - stable
        - beta
        - nightly

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-C target-cpu=native"
  # Environment variables for better LAPACK/BLAS linking on Linux
  PKG_CONFIG_PATH: "/usr/lib/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/local/lib/pkgconfig"
  LD_LIBRARY_PATH: "/usr/lib:/usr/lib/x86_64-linux-gnu:/usr/local/lib"

jobs:
  # Test across multiple platforms and Rust versions
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta, nightly]
        exclude:
          # Reduce CI load by excluding some combinations
          - os: windows-latest
            rust: beta
          - os: windows-latest  
            rust: nightly
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ github.event.inputs.toolchain || matrix.rust || 'stable' }}
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # Ensure Xcode Command Line Tools are available
          sudo xcode-select --install 2>/dev/null || echo "Command Line Tools already installed"
          brew install pkg-config
          brew install openblas
          # Add x86_64 target for SIMD compatibility on Apple Silicon
          rustup target add x86_64-apple-darwin
          # Set BLAS/LAPACK environment variables for macOS
          # Default to Accelerate framework, allow OpenBLAS override
          echo "BLAS_LIB=framework" >> $GITHUB_ENV
          echo "LAPACK_LIB=framework" >> $GITHUB_ENV
          echo "RUSTORCH_BLAS_LIB=framework" >> $GITHUB_ENV
          echo "RUSTORCH_LAPACK_LIB=framework" >> $GITHUB_ENV
          # Add library paths to environment
          if [[ -d "/opt/homebrew/lib" ]]; then
            echo "LIBRARY_PATH=/opt/homebrew/lib:${LIBRARY_PATH:-}" >> $GITHUB_ENV
            echo "LD_LIBRARY_PATH=/opt/homebrew/lib:${LD_LIBRARY_PATH:-}" >> $GITHUB_ENV
          fi
          if [[ -d "/usr/local/lib" ]]; then
            echo "LIBRARY_PATH=/usr/local/lib:${LIBRARY_PATH:-}" >> $GITHUB_ENV  
            echo "LD_LIBRARY_PATH=/usr/local/lib:${LD_LIBRARY_PATH:-}" >> $GITHUB_ENV
          fi
        shell: bash
        
      - name: Verify macOS environment
        if: matrix.os == 'macos-latest'
        run: |
          echo "=== macOS OpenBLAS verification ==="
          brew list openblas
          echo "=== OpenBLAS library location ==="
          find /usr/local /opt/homebrew -name "libopenblas*" 2>/dev/null || true
          echo "=== OpenBLAS symbols check ==="
          # Check for LAPACK symbols in OpenBLAS
          if [[ -f /opt/homebrew/lib/libopenblas.dylib ]]; then
            nm -gU /opt/homebrew/lib/libopenblas.dylib | grep -E "(dsyev_|dgeev_)" || echo "LAPACK symbols not found in ARM64 OpenBLAS"
          fi
          if [[ -f /usr/local/lib/libopenblas.dylib ]]; then
            nm -gU /usr/local/lib/libopenblas.dylib | grep -E "(dsyev_|dgeev_)" || echo "LAPACK symbols not found in x86_64 OpenBLAS"
          fi
          echo "=== Environment ==="
          echo "PKG_CONFIG_PATH: ${PKG_CONFIG_PATH:-unset}"
          echo "LIBRARY_PATH: ${LIBRARY_PATH:-unset}"
          echo "LD_LIBRARY_PATH: ${LD_LIBRARY_PATH:-unset}"
          echo "BLAS_LIB: ${BLAS_LIB:-unset}"
          echo "LAPACK_LIB: ${LAPACK_LIB:-unset}"
        shell: bash
          
      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            gfortran \
            libopenblas-dev \
            liblapack-dev \
            libblas-dev \
            libatlas-base-dev \
            liblapack3 \
            liblapacke-dev \
            libopenmpi-dev \
            openmpi-bin \
            libffi-dev \
            pkg-config
          # 明示的にOpenBLAS環境変数を設定
          echo "OPENBLAS_NUM_THREADS=1" >> $GITHUB_ENV
          echo "BLAS_LIB=openblas" >> $GITHUB_ENV
          echo "LAPACK_LIB=lapack" >> $GITHUB_ENV
          echo "RUSTORCH_BLAS_LIB=openblas" >> $GITHUB_ENV  
          echo "RUSTORCH_LAPACK_LIB=lapack" >> $GITHUB_ENV
        shell: bash
        
      - name: Verify Linux environment
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "=== Compiler versions ==="
          gcc --version
          gfortran --version
          echo "=== Library paths ==="
          find /usr/lib* -name "liblapack*" -o -name "libblas*" -o -name "libopenblas*" 2>/dev/null || true
          echo "=== LAPACK symbols check ==="
          echo "Checking LAPACK symbols in system libraries..."
          if [ -f /usr/lib/x86_64-linux-gnu/liblapack.so.3 ]; then
            nm -D /usr/lib/x86_64-linux-gnu/liblapack.so.3 | grep -E "(dsyev_|dgeev_|dgeqrf_|dgelqf_|dorgqr_|dgesvd_)" | head -5 || echo "No LAPACK symbols in liblapack.so.3"
          fi
          echo "Checking LAPACK symbols in OpenBLAS..."
          if [ -f /usr/lib/x86_64-linux-gnu/libopenblas.so.0 ]; then
            nm -D /usr/lib/x86_64-linux-gnu/libopenblas.so.0 | grep -E "(dsyev_|dgeev_|dgeqrf_|dgelqf_|dorgqr_|dgesvd_)" | head -5 || echo "No LAPACK symbols in OpenBLAS"
          fi
          echo "=== pkg-config ==="
          pkg-config --list-all | grep -i blas || true
          pkg-config --list-all | grep -i lapack || true
          echo "=== Environment variables ==="
          echo "LD_LIBRARY_PATH: ${LD_LIBRARY_PATH:-unset}"
          echo "PKG_CONFIG_PATH: ${PKG_CONFIG_PATH:-unset}"
          echo "BLAS_LIB: ${BLAS_LIB:-unset}"
          echo "LAPACK_LIB: ${LAPACK_LIB:-unset}"
        shell: bash

      - name: Run tests
        run: |
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            # macOSではApple Silicon互換性のため明示的にx86_64ターゲットでテスト
            cargo test --verbose --no-default-features --features "linalg-netlib" --target x86_64-apple-darwin
          elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            # LinuxではLAPACK/BLAS機能を含む基本テスト (MPIを除外してlinalg使用)
            cargo test --verbose --features "linalg"
          else
            # Windowsでは基本機能のみでテスト (linalg-netlibを無効化)
            cargo test --verbose --no-default-features
          fi
        shell: bash

      - name: Run doctests
        run: |
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            # macOSではApple Silicon互換性のため明示的にx86_64ターゲットでdoctest実行
            cargo test --doc --no-default-features --features "linalg-netlib" --target x86_64-apple-darwin
          elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            # LinuxではLAPACK/BLAS機能を含む基本doctest (MPIを除外してlinalg使用)
            cargo test --doc --features "linalg"
          else
            # Windowsでは基本機能のみでdoctest (linalg-netlibを無効化)
            cargo test --doc --no-default-features
          fi
        shell: bash

      - name: Test examples
        run: |
          for example in examples/*.rs; do
            example_name=$(basename "$example" .rs)
            
            # Skip LAPACK-dependent examples on Ubuntu builds to avoid potential linking issues
            if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
              case "$example_name" in
                *matrix*|*linalg*|*decomposition*|*eigen*|*svd*)
                  echo "Skipping LAPACK-dependent example $example_name on Ubuntu (${{ matrix.rust }})"
                  continue
                  ;;
              esac
            fi
            
            echo "Testing example: $example_name"
            if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
              # macOSではApple Silicon互換性のため明示的にx86_64ターゲットで実行
              timeout 30s cargo run --example "$example_name" --target x86_64-apple-darwin || echo "Example $example_name completed or timed out"
            else
              timeout 30s cargo run --example "$example_name" || echo "Example $example_name completed or timed out"
            fi
          done
        shell: bash

  # Code quality checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            gfortran \
            libopenblas-dev \
            liblapack-dev \
            libblas-dev \
            liblapack3 \
            liblapacke-dev \
            libopenmpi-dev \
            openmpi-bin \
            libffi-dev \
            pkg-config

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --features "linalg" --all-targets

      - name: Install audit tools
        run: |
          cargo install cargo-deny --locked
          cargo install cargo-license --locked
          cargo install cargo-outdated --locked
          cargo install cargo-audit --locked
        shell: bash
      - name: Check licenses
        run: |
          cargo deny check licenses
          cargo license --json > licenses.json
        shell: bash
      - name: Audit dependencies
        run: |
          cargo audit --deny warnings
        shell: bash
      - name: Check for outdated dependencies
        run: |
          cargo outdated || echo "Some dependencies are outdated - this is acceptable"
        shell: bash

  # Benchmark performance
  # Add a new job for license compliance
  license:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
        
      - name: Install license checking tools
        run: |
          cargo install cargo-license --locked
          cargo install cargo-deny --locked
        shell: bash
      - name: Generate license report
        run: |
          cargo license --json > licenses.json
          cat licenses.json
        shell: bash
      - name: Verify license compatibility
        run: |
          # リポジトリ内のdeny.tomlを使用してcargo-denyを実行
          cargo deny check
        shell: bash
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            gfortran \
            libopenblas-dev \
            liblapack-dev \
            libblas-dev \
            liblapack3 \
            liblapacke-dev \
            libopenmpi-dev \
            openmpi-bin \
            libffi-dev \
            pkg-config

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Run benchmarks
        run: cargo bench --features "linalg"

      - name: Store benchmark results
        uses: benchmark-action/github-action-benchmark@v1
        if: github.ref == 'refs/heads/main'
        with:
          name: RusTorch Benchmarks
          tool: cargo
          output-file-path: target/criterion/reports/index.html
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true

  # Docker builds
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test, quality]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.event_name == 'release'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and test Docker image
        run: |
          docker build -t rustorch:test .
          docker run --rm rustorch:test echo "Docker build successful"
        shell: bash

      - name: Build and push Docker image
        if: github.event_name == 'release'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            rustorch/rustorch:latest
            rustorch/rustorch:${{ github.event.release.tag_name }}
          platforms: linux/amd64,linux/arm64

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Documentation generation
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            gfortran \
            libopenblas-dev \
            liblapack-dev \
            libblas-dev \
            liblapack3 \
            liblapacke-dev \
            libopenmpi-dev \
            openmpi-bin \
            libffi-dev \
            pkg-config

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Generate documentation
        run: |
          cargo doc --no-deps --features "linalg"
          echo '<meta http-equiv="refresh" content="0; url=rustorch">' > target/doc/index.html
        shell: bash

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc

  # Release to crates.io
  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: [test, quality, benchmark]
    if: github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            gfortran \
            libopenblas-dev \
            liblapack-dev \
            libblas-dev \
            liblapack3 \
            liblapacke-dev \
            libopenmpi-dev \
            openmpi-bin \
            libffi-dev \
            pkg-config

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

  # WASM build and test
  wasm:
    name: WebAssembly Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: wasm32-unknown-unknown

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Build WASM package
        run: wasm-pack build --target web --features wasm

      - name: Copy WASM package to examples
        run: |
          cp -r pkg/ examples/
        shell: bash

      - name: Test WASM in Node.js
        run: |
          cd examples
          npm test
        shell: bash